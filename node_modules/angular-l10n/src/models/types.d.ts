export interface PropertyDecorator {
    <T extends Function>(type: T): T;
    (target: Object, propertyKey?: string | symbol): void;
}
export interface Type<T> extends Function {
    new (...args: any[]): T;
}
export interface DateTimeOptions {
    weekday?: string;
    era?: string;
    year?: string;
    month?: string;
    day?: string;
    hour?: string;
    minute?: string;
    second?: string;
    timeZoneName?: string;
    hour12?: boolean;
}
export interface DefaultLocaleCodes {
    /**
     * ISO 639 two-letter or three-letter code.
     */
    languageCode: string;
    /**
     * ISO 3166 two-letter, uppercase code.
     */
    countryCode?: string;
    /**
     * ISO 15924 four-letter script code.
     */
    scriptCode?: string;
    numberingSystem?: string;
    calendar?: string;
}
export declare type Language = {
    /**
     * ISO 639 two-letter or three-letter code.
     */
    code: string;
    /**
     * 'ltr' or 'rtl'.
     */
    dir: string;
};
export declare enum StorageStrategy {
    Session = 0,
    Local = 1,
    Cookie = 2,
    Disabled = 3,
}
export declare enum ProviderType {
    Fallback = 0,
    Static = 1,
    WebAPI = 2,
}
export declare enum ISOCode {
    Language = 0,
    Country = 1,
    Script = 2,
}
export declare enum LoadingMode {
    Direct = 0,
    Async = 1,
}
export declare enum ServiceState {
    isReady = 0,
    isLoading = 1,
    isWaiting = 2,
}
export declare enum NumberFormatStyle {
    Decimal = 0,
    Percent = 1,
    Currency = 2,
}
export declare type DateFormatterFn = (date: Date, defaultLocale: string, timezone?: string) => string;
export declare type Decimal = {
    minusSign: string;
    decimalSeparator: string;
    thousandSeparator: string;
};
