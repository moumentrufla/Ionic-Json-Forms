import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { LocaleConfig } from '../models/l10n-config';
import { LocaleStorage } from './locale-storage';
/**
 * Manages language, default locale, currency & timezone.
 */
export interface ILocaleService {
    languageCodeChanged: EventEmitter<string>;
    defaultLocaleChanged: EventEmitter<string>;
    currencyCodeChanged: EventEmitter<string>;
    timezoneChanged: EventEmitter<string>;
    loadTranslation: Subject<any>;
    getConfiguration(): LocaleConfig;
    init(): Promise<void>;
    getBrowserLanguage(): string | null;
    getAvailableLanguages(): string[];
    getLanguageDirection(languageCode?: string): string;
    getCurrentLanguage(): string;
    getCurrentCountry(): string;
    getCurrentLocale(): string;
    getCurrentScript(): string;
    getCurrentNumberingSystem(): string;
    getCurrentCalendar(): string;
    getDefaultLocale(): string;
    getCurrentCurrency(): string;
    getCurrencySymbol(currencyDisplay?: 'code' | 'symbol' | 'name', defaultLocale?: string, currency?: string): string;
    getCurrentTimezone(): string;
    setCurrentLanguage(languageCode: string): void;
    setDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void;
    setCurrentCurrency(currencyCode: string): void;
    setCurrentTimezone(zoneName: string): void;
}
/**
 * Manages language, default locale, currency & timezone.
 */
export declare class LocaleService implements ILocaleService {
    private configuration;
    private storage;
    languageCodeChanged: EventEmitter<string>;
    defaultLocaleChanged: EventEmitter<string>;
    currencyCodeChanged: EventEmitter<string>;
    timezoneChanged: EventEmitter<string>;
    loadTranslation: Subject<any>;
    private defaultLocale;
    private currencyCode;
    private timezone;
    constructor(configuration: LocaleConfig, storage: LocaleStorage);
    getConfiguration(): LocaleConfig;
    init(): Promise<void>;
    getBrowserLanguage(): string | null;
    getAvailableLanguages(): string[];
    getLanguageDirection(languageCode?: string): string;
    getCurrentLanguage(): string;
    getCurrentCountry(): string;
    getCurrentScript(): string;
    getCurrentLocale(): string;
    getCurrentNumberingSystem(): string;
    getCurrentCalendar(): string;
    getDefaultLocale(): string;
    getCurrentCurrency(): string;
    getCurrencySymbol(currencyDisplay?: 'code' | 'symbol' | 'name', defaultLocale?: string, currency?: string): string;
    getCurrentTimezone(): string;
    setCurrentLanguage(languageCode: string): void;
    setDefaultLocale(languageCode: string, countryCode?: string, scriptCode?: string, numberingSystem?: string, calendar?: string): void;
    setCurrentCurrency(currencyCode: string): void;
    setCurrentTimezone(zoneName: string): void;
    private initStorage();
    private initLanguage();
    private initDefaultLocale();
    private initCurrency();
    private initTimezone();
    private matchLanguage(languageCode);
    private sendLanguageEvents();
    private sendDefaultLocaleEvents();
    private sendCurrencyEvents();
    private sendTimezoneEvents();
    private sendTranslationEvents();
}
