import { LocaleService } from './locale.service';
/**
 * Provides the methods for locale validation.
 */
export interface ILocaleValidation {
    /**
     * Converts a string to a number according to default locale.
     * If the string cannot be converted to a number, returns NaN.
     */
    parseNumber(s: string, defaultLocale?: string): number | null;
    getRegExp(digits: string, defaultLocale?: string): RegExp;
}
/**
 * Provides the methods for locale validation.
 */
export declare class LocaleValidation implements ILocaleValidation {
    private locale;
    constructor(locale: LocaleService);
    /**
     * Converts a string to a number according to default locale.
     * If the string cannot be converted to a number, returns NaN.
     */
    parseNumber(s: string, defaultLocale?: string): number | null;
    getRegExp(digits: string, defaultLocale?: string): RegExp;
    private getDecimalCode(defaultLocale);
    private getNumberCodes(defaultLocale);
    private toChar(pattern);
    private toUnicode(c);
    private toHex(value);
}
