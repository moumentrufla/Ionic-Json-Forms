/**
 * @license Angular l10n
 * Copyright Roberto Simonetti
 * MIT license
 * https://github.com/robisim74/angular-l10n
 */

import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Output, Pipe, Renderer2, forwardRef } from '@angular/core';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { merge as merge$1 } from 'rxjs/observable/merge';
import { concat as concat$1 } from 'rxjs/observable/concat';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject as ReplaySubject$1 } from 'rxjs/ReplaySubject';
import { NG_VALIDATORS } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Allows to get the dependencies at the module level or component.
 */
class InjectorRef {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        InjectorRef.injector = this.injector;
    }
    /**
     * @template T
     * @param {?} token
     * @return {?}
     */
    static get(token) {
        return InjectorRef.injector.get(token);
    }
}
InjectorRef.injector = null;
InjectorRef.decorators = [
    { type: Injectable },
];
/** @nocollapse */
InjectorRef.ctorParameters = () => [
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/** @enum {number} */
const StorageStrategy = {
    Session: 0,
    Local: 1,
    Cookie: 2,
    Disabled: 3,
};
StorageStrategy[StorageStrategy.Session] = "Session";
StorageStrategy[StorageStrategy.Local] = "Local";
StorageStrategy[StorageStrategy.Cookie] = "Cookie";
StorageStrategy[StorageStrategy.Disabled] = "Disabled";
/** @enum {number} */
const ProviderType = {
    Fallback: 0,
    Static: 1,
    WebAPI: 2,
};
ProviderType[ProviderType.Fallback] = "Fallback";
ProviderType[ProviderType.Static] = "Static";
ProviderType[ProviderType.WebAPI] = "WebAPI";
/** @enum {number} */
const ISOCode = {
    Language: 0,
    Country: 1,
    Script: 2,
};
ISOCode[ISOCode.Language] = "Language";
ISOCode[ISOCode.Country] = "Country";
ISOCode[ISOCode.Script] = "Script";
/** @enum {number} */
const LoadingMode = {
    Direct: 0,
    Async: 1,
};
LoadingMode[LoadingMode.Direct] = "Direct";
LoadingMode[LoadingMode.Async] = "Async";
/** @enum {number} */
const ServiceState = {
    isReady: 0,
    isLoading: 1,
    isWaiting: 2,
};
ServiceState[ServiceState.isReady] = "isReady";
ServiceState[ServiceState.isLoading] = "isLoading";
ServiceState[ServiceState.isWaiting] = "isWaiting";
/** @enum {number} */
const NumberFormatStyle = {
    Decimal: 0,
    Percent: 1,
    Currency: 2,
};
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const LOCALE_CONFIG = new InjectionToken('LOCALE_CONFIG');
const TRANSLATION_CONFIG = new InjectionToken('TRANSLATION_CONFIG');
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides the methods to check if Intl APIs are supported.
 */
class IntlAPI {
    /**
     * @return {?}
     */
    static hasIntl() {
        const /** @type {?} */ hasIntl = typeof Intl === "object" && !!Intl;
        return hasIntl;
    }
    /**
     * @return {?}
     */
    static hasDateTimeFormat() {
        return IntlAPI.hasIntl() && Intl.hasOwnProperty("DateTimeFormat");
    }
    /**
     * @return {?}
     */
    static hasTimezone() {
        if (IntlAPI.hasIntl() && IntlAPI.hasDateTimeFormat()) {
            try {
                new Intl.DateTimeFormat('en-US', { timeZone: 'America/Los_Angeles' }).format(new Date());
            }
            catch (/** @type {?} */ e) {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    static hasNumberFormat() {
        return IntlAPI.hasIntl() && Intl.hasOwnProperty("NumberFormat");
    }
    /**
     * @return {?}
     */
    static hasCollator() {
        return IntlAPI.hasIntl() && Intl.hasOwnProperty("Collator");
    }
}

var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Implement this class-interface to create a custom storage for default locale, currency & timezone.
 * @abstract
 */
class LocaleStorage {
}
LocaleStorage.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LocaleStorage.ctorParameters = () => [];
class BrowserStorage {
    /**
     * @param {?} configuration
     */
    constructor(configuration) {
        this.configuration = configuration;
        this.hasCookie = typeof navigator !== "undefined" && navigator.cookieEnabled;
        this.hasStorage = typeof Storage !== "undefined";
    }
    /**
     * @param {?} name
     * @return {?}
     */
    read(name) {
        return __awaiter$2(this, void 0, void 0, function* () {
            let /** @type {?} */ value = null;
            if (this.configuration.storage != StorageStrategy.Disabled) {
                if (this.configuration.storage == StorageStrategy.Local && this.hasStorage) {
                    value = this.getLocalStorage(name);
                }
                else if (this.configuration.storage == StorageStrategy.Session && this.hasStorage) {
                    value = this.getSessionStorage(name);
                }
                else if (this.configuration.storage == StorageStrategy.Cookie && this.hasCookie) {
                    value = this.getCookie(name);
                }
            }
            return value;
        });
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    write(name, value) {
        return __awaiter$2(this, void 0, void 0, function* () {
            if (this.configuration.storage != StorageStrategy.Disabled) {
                if (this.configuration.storage == StorageStrategy.Local && this.hasStorage) {
                    this.setLocalStorage(name, value);
                }
                else if (this.configuration.storage == StorageStrategy.Session && this.hasStorage) {
                    this.setSessionStorage(name, value);
                }
                else if (this.configuration.storage == StorageStrategy.Cookie && this.hasCookie) {
                    this.setCookie(name, value);
                }
            }
        });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getLocalStorage(name) {
        return localStorage.getItem(name);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getSessionStorage(name) {
        return sessionStorage.getItem(name);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getCookie(name) {
        let /** @type {?} */ result = null;
        if (typeof document !== "undefined") {
            result = new RegExp("(?:^|; )" + encodeURIComponent(name) + "=([^;]*)").exec(document.cookie);
        }
        return result ? result[1] : null;
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setLocalStorage(name, value) {
        localStorage.setItem(name, value);
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setSessionStorage(name, value) {
        sessionStorage.setItem(name, value);
    }
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setCookie(name, value) {
        let /** @type {?} */ expires = "";
        if (this.configuration.cookieExpiration != null) {
            const /** @type {?} */ expirationDate = new Date();
            expirationDate.setTime(expirationDate.getTime() +
                (this.configuration.cookieExpiration * 24 * 60 * 60 * 1000));
            expires = "; expires=" + expirationDate.toUTCString();
        }
        if (typeof document !== "undefined") {
            document.cookie = name + "=" + value + expires + "; path=/";
        }
    }
}
BrowserStorage.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BrowserStorage.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DefaultLocale {
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} defaultLocale
     * @return {?}
     */
    set value(defaultLocale) {
        this._value = defaultLocale;
        this.parseValue();
    }
    /**
     * @param {?} languageCode
     * @param {?=} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    build(languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        this.languageCode = languageCode;
        this.scriptCode = scriptCode;
        this.countryCode = countryCode;
        this.numberingSystem = numberingSystem;
        this.calendar = calendar;
        const /** @type {?} */ value = [];
        value.push(languageCode);
        value.push(!!scriptCode ? "-" + scriptCode : "");
        value.push(!!countryCode ? "-" + countryCode : "");
        // Adds the 'u' (Unicode) extension.
        value.push((!!numberingSystem || !!calendar) ? "-u" : "");
        value.push(!!numberingSystem ? "-nu-" + numberingSystem : "");
        value.push(!!calendar ? "-ca-" + calendar : "");
        this._value = value.join("");
    }
    /**
     * @return {?}
     */
    parseValue() {
        if (!!this.value) {
            let /** @type {?} */ value = this.value;
            // Looks for the 'u' (Unicode) extension.
            const /** @type {?} */ index = value.search("-u");
            if (index != -1) {
                const /** @type {?} */ extensions = value.substring(index + 1).split("-");
                switch (extensions.length) {
                    case 3:
                        if (extensions[1] == "nu") {
                            this.numberingSystem = extensions[2];
                        }
                        else if (extensions[1] == "ca") {
                            this.calendar = extensions[2];
                        }
                        break;
                    default:
                        this.numberingSystem = extensions[2];
                        this.calendar = extensions[4];
                        break;
                }
                // Extracts the codes.
                value = value.substring(0, index);
            }
            const /** @type {?} */ codes = value.split("-");
            switch (codes.length) {
                case 1:
                    this.languageCode = codes[0];
                    break;
                case 2:
                    this.languageCode = codes[0];
                    this.countryCode = codes[1];
                    break;
                default:
                    this.languageCode = codes[0];
                    this.scriptCode = codes[1];
                    this.countryCode = codes[2];
                    break;
            }
        }
    }
}

var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Manages language, default locale, currency & timezone.
 * @record
 */

/**
 * Manages language, default locale, currency & timezone.
 */
class LocaleService {
    /**
     * @param {?} configuration
     * @param {?} storage
     */
    constructor(configuration, storage) {
        this.configuration = configuration;
        this.storage = storage;
        this.languageCodeChanged = new EventEmitter(true);
        this.defaultLocaleChanged = new EventEmitter(true);
        this.currencyCodeChanged = new EventEmitter(true);
        this.timezoneChanged = new EventEmitter(true);
        this.loadTranslation = new Subject$1();
        this.defaultLocale = new DefaultLocale();
    }
    /**
     * @return {?}
     */
    getConfiguration() {
        return this.configuration;
    }
    /**
     * @return {?}
     */
    init() {
        return __awaiter$1(this, void 0, void 0, function* () {
            yield this.initStorage();
            if (this.configuration.defaultLocale) {
                this.initDefaultLocale();
            }
            else if (this.configuration.language) {
                this.initLanguage();
            }
            if (this.configuration.currency) {
                this.initCurrency();
            }
            if (this.configuration.timezone) {
                this.initTimezone();
            }
        });
    }
    /**
     * @return {?}
     */
    getBrowserLanguage() {
        let /** @type {?} */ browserLanguage = null;
        if (typeof navigator !== "undefined" && navigator.language) {
            browserLanguage = navigator.language;
        }
        if (browserLanguage != null) {
            const /** @type {?} */ index = browserLanguage.indexOf("-");
            if (index != -1) {
                browserLanguage = browserLanguage.substring(0, index);
            }
        }
        return browserLanguage;
    }
    /**
     * @return {?}
     */
    getAvailableLanguages() {
        let /** @type {?} */ languages = [];
        if (this.configuration.languages) {
            languages = this.configuration.languages.map((language) => language.code);
        }
        return languages;
    }
    /**
     * @param {?=} languageCode
     * @return {?}
     */
    getLanguageDirection(languageCode = this.defaultLocale.languageCode) {
        const /** @type {?} */ matchedLanguages = this.matchLanguage(languageCode);
        return matchedLanguages[0].dir;
    }
    /**
     * @return {?}
     */
    getCurrentLanguage() {
        return this.defaultLocale.languageCode;
    }
    /**
     * @return {?}
     */
    getCurrentCountry() {
        if (!!this.defaultLocale.countryCode) {
            return this.defaultLocale.countryCode;
        }
        return "";
    }
    /**
     * @return {?}
     */
    getCurrentScript() {
        if (!!this.defaultLocale.scriptCode) {
            return this.defaultLocale.scriptCode;
        }
        return "";
    }
    /**
     * @return {?}
     */
    getCurrentLocale() {
        const /** @type {?} */ locale = !!this.defaultLocale.countryCode
            ? this.defaultLocale.languageCode + "-" + this.defaultLocale.countryCode
            : this.defaultLocale.languageCode;
        return locale;
    }
    /**
     * @return {?}
     */
    getCurrentNumberingSystem() {
        if (!!this.defaultLocale.numberingSystem) {
            return this.defaultLocale.numberingSystem;
        }
        return "";
    }
    /**
     * @return {?}
     */
    getCurrentCalendar() {
        if (!!this.defaultLocale.calendar) {
            return this.defaultLocale.calendar;
        }
        return "";
    }
    /**
     * @return {?}
     */
    getDefaultLocale() {
        return this.defaultLocale.value;
    }
    /**
     * @return {?}
     */
    getCurrentCurrency() {
        return this.currencyCode;
    }
    /**
     * @param {?=} currencyDisplay
     * @param {?=} defaultLocale
     * @param {?=} currency
     * @return {?}
     */
    getCurrencySymbol(currencyDisplay = 'symbol', defaultLocale = this.defaultLocale.value, currency = this.currencyCode) {
        let /** @type {?} */ currencySymbol = this.currencyCode;
        if (IntlAPI.hasNumberFormat()) {
            const /** @type {?} */ localeZero = new Intl.NumberFormat(defaultLocale).format(0);
            const /** @type {?} */ value = 0; // Reference value.
            const /** @type {?} */ localeValue = new Intl.NumberFormat(defaultLocale, {
                style: 'currency',
                currency: currency,
                currencyDisplay: currencyDisplay,
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(value);
            currencySymbol = localeValue.replace(localeZero, "");
            currencySymbol = currencySymbol.trim();
        }
        return currencySymbol;
    }
    /**
     * @return {?}
     */
    getCurrentTimezone() {
        return this.timezone;
    }
    /**
     * @param {?} languageCode
     * @return {?}
     */
    setCurrentLanguage(languageCode) {
        if (this.defaultLocale.languageCode != languageCode) {
            this.defaultLocale.build(languageCode);
            this.storage.write("defaultLocale", this.defaultLocale.value);
            this.sendLanguageEvents();
            this.sendTranslationEvents();
        }
    }
    /**
     * @param {?} languageCode
     * @param {?=} countryCode
     * @param {?=} scriptCode
     * @param {?=} numberingSystem
     * @param {?=} calendar
     * @return {?}
     */
    setDefaultLocale(languageCode, countryCode, scriptCode, numberingSystem, calendar) {
        if (this.defaultLocale.languageCode != languageCode ||
            this.defaultLocale.countryCode != countryCode ||
            this.defaultLocale.scriptCode != scriptCode ||
            this.defaultLocale.numberingSystem != numberingSystem ||
            this.defaultLocale.calendar != calendar) {
            this.defaultLocale.build(languageCode, countryCode, scriptCode, numberingSystem, calendar);
            this.storage.write("defaultLocale", this.defaultLocale.value);
            this.sendDefaultLocaleEvents();
            this.sendTranslationEvents();
        }
    }
    /**
     * @param {?} currencyCode
     * @return {?}
     */
    setCurrentCurrency(currencyCode) {
        if (this.currencyCode != currencyCode) {
            this.currencyCode = currencyCode;
            this.storage.write("currency", this.currencyCode);
            this.sendCurrencyEvents();
        }
    }
    /**
     * @param {?} zoneName
     * @return {?}
     */
    setCurrentTimezone(zoneName) {
        if (this.timezone != zoneName) {
            this.timezone = zoneName;
            this.storage.write("timezone", this.timezone);
            this.sendTimezoneEvents();
        }
    }
    /**
     * @return {?}
     */
    initStorage() {
        return __awaiter$1(this, void 0, void 0, function* () {
            // Tries to retrieve default locale & currency from the browser storage.
            if (!this.defaultLocale.value) {
                const /** @type {?} */ defaultLocale = yield this.storage.read("defaultLocale");
                if (!!defaultLocale) {
                    this.defaultLocale.value = defaultLocale;
                }
            }
            if (this.currencyCode == null) {
                const /** @type {?} */ currencyCode = yield this.storage.read("currency");
                if (!!currencyCode) {
                    this.currencyCode = currencyCode;
                }
            }
            if (this.timezone == null) {
                const /** @type {?} */ zoneName = yield this.storage.read("timezone");
                if (!!zoneName) {
                    this.timezone = zoneName;
                }
            }
        });
    }
    /**
     * @return {?}
     */
    initLanguage() {
        if (!this.defaultLocale.languageCode) {
            const /** @type {?} */ browserLanguage = this.getBrowserLanguage();
            let /** @type {?} */ matchedLanguages = [];
            if (!!browserLanguage) {
                matchedLanguages = this.matchLanguage(browserLanguage);
            }
            if (!!browserLanguage && matchedLanguages.length > 0) {
                this.defaultLocale.build(browserLanguage);
            }
            else if (this.configuration.language) {
                this.defaultLocale.build(this.configuration.language);
            }
            this.storage.write("defaultLocale", this.defaultLocale.value);
        }
        this.sendLanguageEvents();
    }
    /**
     * @return {?}
     */
    initDefaultLocale() {
        if (!this.defaultLocale.value) {
            if (this.configuration.defaultLocale) {
                this.defaultLocale.build(this.configuration.defaultLocale.languageCode, this.configuration.defaultLocale.countryCode, this.configuration.defaultLocale.scriptCode, this.configuration.defaultLocale.numberingSystem, this.configuration.defaultLocale.calendar);
                this.storage.write("defaultLocale", this.defaultLocale.value);
            }
        }
        this.sendDefaultLocaleEvents();
    }
    /**
     * @return {?}
     */
    initCurrency() {
        if (this.currencyCode == null) {
            if (this.configuration.currency) {
                this.currencyCode = this.configuration.currency;
                this.storage.write("currency", this.currencyCode);
            }
        }
        this.sendCurrencyEvents();
    }
    /**
     * @return {?}
     */
    initTimezone() {
        if (this.timezone == null) {
            if (this.configuration.timezone) {
                this.timezone = this.configuration.timezone;
                this.storage.write("timezone", this.timezone);
            }
        }
        this.sendCurrencyEvents();
    }
    /**
     * @param {?} languageCode
     * @return {?}
     */
    matchLanguage(languageCode) {
        let /** @type {?} */ matchedLanguages = [];
        if (this.configuration.languages) {
            matchedLanguages = this.configuration.languages.filter((language) => {
                return language.code == languageCode;
            });
        }
        return matchedLanguages;
    }
    /**
     * @return {?}
     */
    sendLanguageEvents() {
        this.languageCodeChanged.emit(this.defaultLocale.languageCode);
    }
    /**
     * @return {?}
     */
    sendDefaultLocaleEvents() {
        this.defaultLocaleChanged.emit(this.defaultLocale.value);
    }
    /**
     * @return {?}
     */
    sendCurrencyEvents() {
        this.currencyCodeChanged.emit(this.currencyCode);
    }
    /**
     * @return {?}
     */
    sendTimezoneEvents() {
        this.timezoneChanged.emit(this.timezone);
    }
    /**
     * @return {?}
     */
    sendTranslationEvents() {
        // This event is subscribed by TranslationService to load the translation data.
        this.loadTranslation.next();
    }
}
LocaleService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LocaleService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] },] },
    { type: LocaleStorage, },
];
LocaleService.propDecorators = {
    "languageCodeChanged": [{ type: Output },],
    "defaultLocaleChanged": [{ type: Output },],
    "currencyCodeChanged": [{ type: Output },],
    "timezoneChanged": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Implement this class-interface to create a custom provider for translation data.
 * @abstract
 */
class TranslationProvider {
}
TranslationProvider.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TranslationProvider.ctorParameters = () => [];
class HttpTranslationProvider {
    /**
     * @param {?} configuration
     * @param {?} http
     */
    constructor(configuration, http$$1) {
        this.configuration = configuration;
        this.http = http$$1;
        this.cache = {};
    }
    /**
     * @param {?} language
     * @param {?} args
     * @return {?}
     */
    getTranslation(language, args) {
        let /** @type {?} */ url = "";
        switch (args.type) {
            case ProviderType.WebAPI:
                url += args.path + language;
                break;
            default:
                url += args.prefix + language + ".json";
        }
        if (this.configuration.caching) {
            return this.caching(url, this.http.get(url));
        }
        return this.http.get(url);
    }
    /**
     * @param {?} key
     * @param {?} request
     * @return {?}
     */
    caching(key, request) {
        if (this.cache[key]) {
            return this.cache[key];
        }
        const /** @type {?} */ buffer = new ReplaySubject$1(1);
        request.subscribe((value) => buffer.next(value), (error) => buffer.error(error), () => buffer.complete());
        const /** @type {?} */ response = buffer.asObservable();
        this.cache[key] = response;
        return response;
    }
}
HttpTranslationProvider.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HttpTranslationProvider.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLATION_CONFIG,] },] },
    { type: HttpClient, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Implement this class-interface to create a custom handler for translated values.
 * @abstract
 */
class TranslationHandler {
}
TranslationHandler.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TranslationHandler.ctorParameters = () => [];
class DefaultTranslationHandler {
    /**
     * @param {?} configuration
     */
    constructor(configuration) {
        this.configuration = configuration;
    }
    /**
     * @param {?} path
     * @param {?} key
     * @param {?} value
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    parseValue(path, key, value, args, lang) {
        if (value == null) {
            return this.handleMissingValue(path);
        }
        else if (args) {
            return this.handleArgs(value, args);
        }
        return value;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    handleMissingValue(path) {
        if (this.configuration.missingValue) {
            return typeof this.configuration.missingValue === "function"
                ? this.configuration.missingValue(path)
                : this.configuration.missingValue;
        }
        // The same path is returned.
        return path;
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    handleArgs(value, args) {
        const /** @type {?} */ TEMPLATE_REGEXP = /{{\s?([^{}\s]*)\s?}}/g;
        return value.replace(TEMPLATE_REGEXP, (substring, parsedKey) => {
            const /** @type {?} */ replacer = /** @type {?} */ (args[parsedKey]);
            return typeof replacer !== "undefined" ? replacer : substring;
        });
    }
}
DefaultTranslationHandler.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DefaultTranslationHandler.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLATION_CONFIG,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} item
 * @return {?}
 */
function isObject(item) {
    return (typeof item === "object" && !Array.isArray(item));
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function mergeDeep(target, source) {
    const /** @type {?} */ output = Object.assign({}, target);
    if (isObject(target) && isObject(source)) {
        Object.keys(source).forEach((key) => {
            if (isObject(source[key])) {
                if (!(key in target)) {
                    Object.assign(output, { [key]: source[key] });
                }
                else {
                    output[key] = mergeDeep(target[key], source[key]);
                }
            }
            else {
                Object.assign(output, { [key]: source[key] });
            }
        });
    }
    return output;
}

var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Manages the translation data.
 * @record
 */

/**
 * Manages the translation data.
 */
class TranslationService {
    /**
     * @param {?} configuration
     * @param {?} locale
     * @param {?} translationProvider
     * @param {?} translationHandler
     */
    constructor(configuration, locale, translationProvider, translationHandler) {
        this.configuration = configuration;
        this.locale = locale;
        this.translationProvider = translationProvider;
        this.translationHandler = translationHandler;
        this.translationError = new Subject$1();
        this.translation = new BehaviorSubject$1('');
        /**
         * The translation data: {language: {key: value}}.
         */
        this.translationData = {};
        this.serviceState = ServiceState.isWaiting;
    }
    /**
     * @return {?}
     */
    getConfiguration() {
        return this.configuration;
    }
    /**
     * @return {?}
     */
    init() {
        return __awaiter$3(this, void 0, void 0, function* () {
            if (this.configuration.providers) {
                this.loadingMode = LoadingMode.Async;
            }
            else {
                this.loadingMode = LoadingMode.Direct;
                if (this.configuration.translationData) {
                    const /** @type {?} */ translations = this.configuration.translationData;
                    for (const /** @type {?} */ translation of translations) {
                        this.addData(translation.data, translation.languageCode);
                    }
                }
            }
            // When the language changes, loads translation data.
            this.locale.loadTranslation.subscribe(() => { this.loadTranslation(); });
            yield this.loadTranslation();
        });
    }
    /**
     * Fired when the translation data has been loaded. Returns the translation language.
     * @return {?}
     */
    translationChanged() {
        return this.translation.asObservable();
    }
    /**
     * Translates a key or an array of keys.
     * @param {?} keys The key or an array of keys to be translated
     * @param {?=} args Optional parameters contained in the key
     * @param {?=} lang The current language of the service is used by default
     * @return {?} The translated value or an object: {key: value}
     */
    translate(keys, args = null, lang = this.translation.getValue()) {
        // If the service is not ready, returns the keys.
        if (this.serviceState != ServiceState.isReady)
            return keys;
        if (Array.isArray(keys)) {
            const /** @type {?} */ data = {};
            for (const /** @type {?} */ key of keys) {
                data[key] = this.translateKey(key, args, lang);
            }
            return data;
        }
        return this.translateKey(keys, args, lang);
    }
    /**
     * @param {?} keys
     * @param {?=} args
     * @param {?=} lang
     * @return {?}
     */
    translateAsync(keys, args, lang = this.translation.getValue()) {
        return Observable$1.create((observer) => {
            const /** @type {?} */ values = this.translate(keys, args, lang);
            observer.next(values);
            observer.complete();
        });
    }
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    translateKey(key, args, lang) {
        if (key == null || key == "")
            return null;
        // I18n plural.
        if (this.configuration.i18nPlural && /^\d+\b/.exec(key)) {
            return this.translateI18nPlural(key, args, lang);
        }
        return this.getValue(key, args, lang);
    }
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    getValue(key, args, lang) {
        const /** @type {?} */ path = key;
        let /** @type {?} */ value = null;
        let /** @type {?} */ translation = this.translationData[lang];
        if (translation) {
            // Composed key.
            if (this.configuration.composedKeySeparator) {
                const /** @type {?} */ sequences = key.split(this.configuration.composedKeySeparator);
                key = /** @type {?} */ ((sequences.shift()));
                while (sequences.length > 0 && translation[key]) {
                    translation = translation[key];
                    key = /** @type {?} */ ((sequences.shift()));
                }
            }
            value = translation[key] || translation[this.configuration.missingKey || ""];
        }
        return this.translationHandler.parseValue(path, key, value, args, lang);
    }
    /**
     * @param {?} key
     * @param {?} args
     * @param {?} lang
     * @return {?}
     */
    translateI18nPlural(key, args, lang) {
        let /** @type {?} */ keyText = key.replace(/^\d+\b/, "");
        keyText = keyText.trim();
        const /** @type {?} */ keyNumber = parseFloat(key);
        key = key.replace(/^\d+/, this.translateNumber(keyNumber));
        return key.replace(keyText, this.getValue(keyText, args, lang));
    }
    /**
     * @param {?} keyNumber
     * @return {?}
     */
    translateNumber(keyNumber) {
        if (!isNaN(keyNumber) && IntlAPI.hasNumberFormat()) {
            const /** @type {?} */ localeNumber = new Intl.NumberFormat(this.translation.getValue()).format(keyNumber);
            return localeNumber;
        }
        return keyNumber.toString();
    }
    /**
     * @return {?}
     */
    loadTranslation() {
        return __awaiter$3(this, void 0, void 0, function* () {
            let /** @type {?} */ language;
            if (this.configuration.composedLanguage) {
                language = this.composeLanguage(this.configuration.composedLanguage);
            }
            else {
                language = this.locale.getCurrentLanguage();
            }
            if (language != null) {
                if (this.loadingMode == LoadingMode.Async) {
                    yield this.getTranslation(language).toPromise();
                }
                else {
                    this.releaseTranslation(language);
                }
            }
        });
    }
    /**
     * @param {?} composedLanguage
     * @return {?}
     */
    composeLanguage(composedLanguage) {
        let /** @type {?} */ language = "";
        if (composedLanguage.length > 0) {
            for (let /** @type {?} */ i = 0; i <= composedLanguage.length - 1; i++) {
                switch (composedLanguage[i]) {
                    case ISOCode.Script:
                        language += this.locale.getCurrentScript();
                        break;
                    case ISOCode.Country:
                        language += this.locale.getCurrentCountry();
                        break;
                    default:
                        language += this.locale.getCurrentLanguage();
                }
                if (i < composedLanguage.length - 1) {
                    language += "-";
                }
            }
        }
        return language;
    }
    /**
     * @param {?} language
     * @return {?}
     */
    getTranslation(language) {
        return Observable$1.create((observer) => {
            this.translationData = {};
            this.serviceState = ServiceState.isLoading;
            const /** @type {?} */ sequencesOfOrderedTranslationData = [];
            const /** @type {?} */ sequencesOfTranslationData = [];
            for (const /** @type {?} */ provider of /** @type {?} */ ((this.configuration.providers))) {
                if (typeof provider.type !== "undefined" && provider.type == ProviderType.Fallback) {
                    let /** @type {?} */ fallbackLanguage = language;
                    if (provider.fallbackLanguage) {
                        fallbackLanguage = this.composeLanguage(provider.fallbackLanguage);
                    }
                    sequencesOfOrderedTranslationData.push(this.translationProvider.getTranslation(fallbackLanguage, provider));
                }
                else {
                    sequencesOfTranslationData.push(this.translationProvider.getTranslation(language, provider));
                }
            }
            // Merges all the sequences into a single observable sequence.
            const /** @type {?} */ mergedSequencesOfTranslationData = merge$1(...sequencesOfTranslationData);
            sequencesOfOrderedTranslationData.push(mergedSequencesOfTranslationData);
            concat$1(...sequencesOfOrderedTranslationData).subscribe((data) => {
                this.addData(data, language);
            }, (error) => {
                // Sends an event for custom actions.
                this.translationError.next(error);
                this.releaseTranslation(language);
                observer.next(null);
                observer.complete();
            }, () => {
                this.releaseTranslation(language);
                observer.next(null);
                observer.complete();
            });
        });
    }
    /**
     * @param {?} data
     * @param {?} language
     * @return {?}
     */
    addData(data, language) {
        this.translationData[language] = typeof this.translationData[language] !== "undefined"
            ? mergeDeep(this.translationData[language], data)
            : data;
    }
    /**
     * @param {?} language
     * @return {?}
     */
    releaseTranslation(language) {
        this.serviceState = ServiceState.isReady;
        this.sendEvents(language);
    }
    /**
     * @param {?} language
     * @return {?}
     */
    sendEvents(language) {
        // Sends an event for the services.
        this.translation.next(language);
    }
}
TranslationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
TranslationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLATION_CONFIG,] },] },
    { type: LocaleService, },
    { type: TranslationProvider, },
    { type: TranslationHandler, },
];

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Initializes the services.
 */
class L10nLoader {
    /**
     * @param {?} localeConfig
     * @param {?} translationConfig
     * @param {?} locale
     * @param {?} translation
     */
    constructor(localeConfig, translationConfig, locale, translation) {
        this.localeConfig = localeConfig;
        this.translationConfig = translationConfig;
        this.locale = locale;
        this.translation = translation;
    }
    /**
     * Loads l10n services.
     * @return {?}
     */
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            // LocaleService initialization.
            if (Object.keys(this.localeConfig).length > 0) {
                yield this.locale.init();
            }
            // TranslationService initialization.
            if (Object.keys(this.translationConfig).length > 0) {
                yield this.translation.init();
            }
        });
    }
}
L10nLoader.decorators = [
    { type: Injectable },
];
/** @nocollapse */
L10nLoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_CONFIG,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLATION_CONFIG,] },] },
    { type: LocaleService, },
    { type: TranslationService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides 'lang' to the translate pipe.
 */
class Translation {
    /**
     * @param {?=} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.paramSubscriptions = [];
        this.translation = InjectorRef.get(TranslationService);
        // When the language changes, subscribes to the event & updates lang property.
        this.paramSubscriptions.push(this.translation.translationChanged().subscribe((language) => {
            this.lang = language;
            // OnPush Change Detection strategy.
            if (this.changeDetectorRef) {
                this.changeDetectorRef.markForCheck();
            }
        }));
    }
    /**
     * @return {?}
     */
    cancelParamSubscriptions() {
        this.paramSubscriptions.forEach((subscription) => {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
        });
    }
}
Translation.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Translation.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides 'lang' to the translate pipe,
 * 'defaultLocale', 'currency', 'timezone' to l10nDate, l10nDecimal, l10nPercent & l10nCurrency pipes.
 */
class Localization extends Translation {
    /**
     * @param {?=} changeDetectorRef
     */
    constructor(changeDetectorRef) {
        super();
        this.changeDetectorRef = changeDetectorRef;
        this.locale = InjectorRef.get(LocaleService);
        this.defaultLocale = this.locale.getDefaultLocale();
        // When the default locale changes, subscribes to the event & updates defaultLocale property.
        this.paramSubscriptions.push(this.locale.defaultLocaleChanged.subscribe((defaultLocale) => {
            this.defaultLocale = defaultLocale;
            // OnPush Change Detection strategy.
            if (this.changeDetectorRef) {
                this.changeDetectorRef.markForCheck();
            }
        }));
        this.currency = this.locale.getCurrentCurrency();
        // When the currency changes, subscribes to the event & updates currency property.
        this.paramSubscriptions.push(this.locale.currencyCodeChanged.subscribe((currency) => {
            this.currency = currency;
            // OnPush Change Detection strategy.
            if (this.changeDetectorRef) {
                this.changeDetectorRef.markForCheck();
            }
        }));
        this.timezone = this.locale.getCurrentTimezone();
        // When the timezone changes, subscribes to the event & updates timezone property.
        this.paramSubscriptions.push(this.locale.timezoneChanged.subscribe((zoneName) => {
            this.timezone = zoneName;
            // OnPush Change Detection strategy.
            if (this.changeDetectorRef) {
                this.changeDetectorRef.markForCheck();
            }
        }));
    }
}
Localization.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Localization.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides the methods for locale validation.
 * @record
 */

/**
 * Provides the methods for locale validation.
 */
class LocaleValidation {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        this.locale = locale;
    }
    /**
     * Converts a string to a number according to default locale.
     * If the string cannot be converted to a number, returns NaN.
     * @param {?} s
     * @param {?=} defaultLocale
     * @return {?}
     */
    parseNumber(s, defaultLocale = this.locale.getDefaultLocale()) {
        if (s == "" || s == null) {
            return null;
        }
        let /** @type {?} */ value = "";
        const /** @type {?} */ decimalCode = this.getDecimalCode(defaultLocale);
        const /** @type {?} */ numberCodes = this.getNumberCodes(defaultLocale);
        const /** @type {?} */ characters = s.split("");
        for (const /** @type {?} */ char of characters) {
            const /** @type {?} */ charCode = this.toUnicode(char);
            const /** @type {?} */ index = numberCodes.indexOf(charCode);
            if (index != -1) {
                value += index;
            }
            else if (charCode == decimalCode.minusSign) {
                value += "-";
            }
            else if (charCode == decimalCode.decimalSeparator) {
                value += ".";
            }
            else if (charCode == decimalCode.thousandSeparator) {
                continue;
            }
            else {
                return NaN;
            }
        }
        return parseFloat(value);
    }
    /**
     * @param {?} digits
     * @param {?=} defaultLocale
     * @return {?}
     */
    getRegExp(digits, defaultLocale = this.locale.getDefaultLocale()) {
        let /** @type {?} */ minInt = 1;
        let /** @type {?} */ minFraction = 0;
        let /** @type {?} */ maxFraction = 3;
        if (!!digits) {
            const /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
            const /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);
            if (parts != null) {
                if (parts[1] != null) {
                    // Min integer digits.
                    minInt = parseInt(parts[1]);
                }
                if (parts[3] != null) {
                    // Min fraction digits.
                    minFraction = parseInt(parts[3]);
                }
                if (parts[5] != null) {
                    // Max fraction digits.
                    maxFraction = parseInt(parts[5]);
                }
            }
        }
        const /** @type {?} */ decimalCode = this.getDecimalCode(defaultLocale);
        const /** @type {?} */ numberCodes = this.getNumberCodes(defaultLocale);
        const /** @type {?} */ minusSign = decimalCode.minusSign;
        const /** @type {?} */ zero = numberCodes[0];
        const /** @type {?} */ decimalSeparator = decimalCode.decimalSeparator;
        const /** @type {?} */ thousandSeparator = decimalCode.thousandSeparator;
        const /** @type {?} */ nine = numberCodes[9];
        // Pattern for 1.0-2 digits: /^-?[0-9]{1,}(\.[0-9]{0,2})?$/
        // Unicode pattern = "^\u002d?[\u0030-\u0039]{1,}(\\u002e[\u0030-\u0039]{0,2})?$"
        // Complete Pattern with thousand separator:
        // /^-?([0-9]{1,}|(?=(?:\,*[0-9]){1,}(\.|$))(?!0(?!\.|[0-9]))[0-9]{1,3}(\,[0-9]{3})*)(\.[0-9]{0,2})?$/
        // where:
        // (?=(?:\,*[0-9]){1,}(\.|$)) => Positive Lookahead to count the integer digits
        // (?!0(?!\.|[0-9])) => Negative Lookahead to avoid 0,1111.00
        // [0-9]{1,3}(\,[0-9]{3})* => Allows thousand separator
        const /** @type {?} */ d = `[${zero}-${nine}]`;
        const /** @type {?} */ n = `{${minInt},}`;
        const /** @type {?} */ nm = `{${minFraction},${maxFraction}}`;
        const /** @type {?} */ plainPattern = `${d}${n}`;
        // tslint:disable-next-line
        const /** @type {?} */ thousandPattern = `(?=(?:\\${thousandSeparator}*${d})${n}(\\${decimalSeparator}|$))(?!${zero}(?!\\${decimalSeparator}|${d}))${d}{1,3}(\\${thousandSeparator}${d}{3})*`;
        let /** @type {?} */ pattern = `^${minusSign}?(${plainPattern}|${thousandPattern})`;
        if (minFraction > 0 && maxFraction > 0) {
            // Decimal separator is mandatory.
            pattern += `\\${decimalSeparator}${d}${nm}$`;
        }
        else if (minFraction == 0 && maxFraction > 0) {
            // Decimal separator is optional.
            pattern += `(\\${decimalSeparator}${d}${nm})?$`;
        }
        else {
            // Integer number.
            pattern += `$`;
        }
        pattern = this.toChar(pattern);
        const /** @type {?} */ regExp = new RegExp(pattern);
        return regExp;
    }
    /**
     * @param {?} defaultLocale
     * @return {?}
     */
    getDecimalCode(defaultLocale) {
        let /** @type {?} */ decimalCode = {
            minusSign: this.toUnicode("-"),
            decimalSeparator: this.toUnicode("."),
            thousandSeparator: this.toUnicode(",")
        };
        if (IntlAPI.hasNumberFormat()) {
            const /** @type {?} */ value = -1000.9; // Reference value.
            const /** @type {?} */ localeValue = new Intl.NumberFormat(defaultLocale).format(value);
            const /** @type {?} */ unicodeChars = [];
            for (let /** @type {?} */ i = 0; i <= 7; i++) {
                unicodeChars.push(this.toUnicode(localeValue.charAt(i)));
            }
            // Right to left:
            // checks Unicode characters 'RIGHT-TO-LEFT MARK' (U+200F) & 'Arabic Letter Mark' (U+061C),
            // or the reverse order.
            // Left to right:
            // checks Unicode character 'LEFT-TO-RIGHT MARK' (U+200E).
            if (unicodeChars[0] == "\\u200F" || unicodeChars[0] == "\\u061C") {
                decimalCode = {
                    minusSign: unicodeChars[1],
                    decimalSeparator: unicodeChars[7],
                    thousandSeparator: unicodeChars[3]
                };
            }
            else if (unicodeChars[0] == this.toUnicode(new Intl.NumberFormat(defaultLocale).format(1))) {
                decimalCode = {
                    minusSign: unicodeChars[7],
                    decimalSeparator: unicodeChars[5],
                    thousandSeparator: unicodeChars[1]
                };
            }
            else if (unicodeChars[0] == "\\u200E") {
                decimalCode = {
                    minusSign: unicodeChars[1],
                    decimalSeparator: unicodeChars[7],
                    thousandSeparator: unicodeChars[3]
                };
            }
            else {
                decimalCode = {
                    minusSign: unicodeChars[0],
                    decimalSeparator: unicodeChars[6],
                    thousandSeparator: unicodeChars[2]
                };
            }
        }
        return decimalCode;
    }
    /**
     * @param {?} defaultLocale
     * @return {?}
     */
    getNumberCodes(defaultLocale) {
        const /** @type {?} */ numberCodes = [];
        for (let /** @type {?} */ num = 0; num <= 9; num++) {
            numberCodes.push(this.toUnicode(num.toString()));
        }
        if (IntlAPI.hasNumberFormat()) {
            for (let /** @type {?} */ num = 0; num <= 9; num++) {
                numberCodes[num] = this.toUnicode(new Intl.NumberFormat(defaultLocale).format(num));
            }
        }
        return numberCodes;
    }
    /**
     * @param {?} pattern
     * @return {?}
     */
    toChar(pattern) {
        return pattern.replace(/\\u[\dA-F]{4}/gi, (match) => {
            return String.fromCharCode(parseInt(match.replace(/\\u/g, ""), 16));
        });
    }
    /**
     * @param {?} c
     * @return {?}
     */
    toUnicode(c) {
        return "\\u" + this.toHex(c.charCodeAt(0));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toHex(value) {
        let /** @type {?} */ hex = value.toString(16).toUpperCase();
        // With padding.
        hex = "0000".substr(0, 4 - hex.length) + hex;
        return hex;
    }
}
LocaleValidation.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LocaleValidation.ctorParameters = () => [
    { type: LocaleService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Intl.Collator APIs.
 * @record
 */

/**
 * Intl.Collator APIs.
 */
class Collator {
    /**
     * @param {?} locale
     * @param {?} translation
     */
    constructor(locale, translation) {
        this.locale = locale;
        this.translation = translation;
    }
    /**
     * Compares two keys by the value of translation according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} key1
     * @param {?} key2
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} A negative value if the value of translation of key1 comes before the value of translation of key2;
     *         a positive value if key1 comes after key2;
     *         0 if they are considered equal or Intl.Collator is not supported
     */
    compare(key1, key2, extension, options = { usage: 'sort', sensitivity: 'variant' }) {
        if (!IntlAPI.hasCollator()) {
            return 0;
        }
        const /** @type {?} */ value1 = this.translation.translate(key1);
        const /** @type {?} */ value2 = this.translation.translate(key2);
        const /** @type {?} */ locale = this.addExtension(this.locale.getCurrentLocale(), extension);
        return new Intl.Collator(locale, options).compare(value1, value2);
    }
    /**
     * Sorts an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} The same sorted list or the same list if Intl.Collator is not supported
     */
    sort(list, keyName, order = "asc", extension, options = { usage: 'sort', sensitivity: 'variant' }) {
        if (!list || !keyName || !IntlAPI.hasCollator()) {
            return list;
        }
        list.sort((key1, key2) => {
            return this.compare(key1[keyName], key2[keyName], extension, options);
        });
        if (order == "desc") {
            list.reverse();
        }
        return list;
    }
    /**
     * Sorts asynchronously an array of objects or an array of arrays according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} list The array to be sorted
     * @param {?} keyName The column that contains the keys of the values to be ordered
     * @param {?=} order 'asc' or 'desc'. The default value is 'asc'
     * @param {?=} extension Unicode extension key, e.g. 'co-phonebk'
     * @param {?=} options Default is { usage: 'sort', sensitivity: 'variant' }
     * @return {?} An observable of the sorted list or of the same list if Intl.Collator is not supported
     */
    sortAsync(list, keyName, order, extension, options = { usage: 'sort', sensitivity: 'variant' }) {
        return Observable$1.create((observer) => {
            observer.next(this.sort(list, keyName, order, extension, options));
            observer.complete();
        });
    }
    /**
     * Matches a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} A filtered list or the same list if Intl.Collator is not supported
     */
    search(s, list, keyNames, options = { usage: 'search' }) {
        if (!list || !keyNames || s == "" || s == null || !IntlAPI.hasCollator()) {
            return list;
        }
        const /** @type {?} */ locale = this.locale.getCurrentLocale();
        const /** @type {?} */ collator = new Intl.Collator(locale, options);
        const /** @type {?} */ matches = list.filter((key) => {
            let /** @type {?} */ found = false;
            for (let /** @type {?} */ i = 0; i < keyNames.length; i++) {
                if (this.match(key[keyNames[i]], s, collator)) {
                    found = true;
                    break;
                }
            }
            return found;
        });
        return matches;
    }
    /**
     * Matches asynchronously a string into an array of objects or an array of arrays
     * according to the current language.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator
     * @param {?} s The string to search
     * @param {?} list The array in which to search
     * @param {?} keyNames An array that contains the columns to look for
     * @param {?=} options Default is { usage: 'search' }
     * @return {?} An observable of the filtered list or the same list if Intl.Collator is not supported
     */
    searchAsync(s, list, keyNames, options = { usage: 'search' }) {
        return Observable$1.create((observer) => {
            observer.next(this.search(s, list, keyNames, options));
            observer.complete();
        });
    }
    /**
     * @param {?} locale
     * @param {?=} extension
     * @return {?}
     */
    addExtension(locale, extension) {
        if (!!extension) {
            locale = locale + "-u-" + extension;
        }
        return locale;
    }
    /**
     * @param {?} key
     * @param {?} s
     * @param {?} collator
     * @return {?}
     */
    match(key, s, collator) {
        const /** @type {?} */ value = this.translation.translate(key);
        const /** @type {?} */ valueLength = value.length;
        const /** @type {?} */ sLength = s.length;
        if (sLength > valueLength) {
            return false;
        }
        if (sLength == valueLength) {
            return collator.compare(value, s) == 0;
        }
        let /** @type {?} */ found = false;
        for (let /** @type {?} */ i = 0; i < valueLength - (sLength - 1); i++) {
            const /** @type {?} */ str = value.substr(i, sLength);
            if (collator.compare(str, s) == 0) {
                found = true;
                break;
            }
        }
        return found;
    }
}
Collator.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Collator.ctorParameters = () => [
    { type: LocaleService, },
    { type: TranslationService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Property decorator for components to provide the parameter to the translate pipe.
 * @return {?}
 */
function Language() {
    /**
     * @param {?} target
     * @param {?=} propertyKey
     * @return {?}
     */
    function DecoratorFactory(target, propertyKey) {
        let /** @type {?} */ subscription;
        const /** @type {?} */ targetNgOnInit = target.ngOnInit;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnInit() {
            const /** @type {?} */ translation = InjectorRef.get(TranslationService);
            if (typeof propertyKey !== "undefined") {
                // When the language changes, subscribes to the event & updates language property.
                subscription = translation.translationChanged().subscribe((language) => {
                    this[propertyKey] = language;
                });
            }
            if (targetNgOnInit) {
                targetNgOnInit.apply(this);
            }
        }
        target.ngOnInit = ngOnInit;
        const /** @type {?} */ targetNgOnDestroy = target.ngOnDestroy;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnDestroy() {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
            if (targetNgOnDestroy) {
                targetNgOnDestroy.apply(this);
            }
        }
        target.ngOnDestroy = ngOnDestroy;
        if (typeof propertyKey !== "undefined") {
            Object.defineProperty(target, propertyKey, {
                writable: true,
                value: undefined
            });
        }
    }
    return DecoratorFactory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Property decorator for components to provide the parameter
 * to l10nDate, l10nDecimal, l10nPercent & l10nCurrency pipes.
 * @return {?}
 */
function DefaultLocale$1() {
    /**
     * @param {?} target
     * @param {?=} propertyKey
     * @return {?}
     */
    function DecoratorFactory(target, propertyKey) {
        let /** @type {?} */ subscription;
        const /** @type {?} */ targetNgOnInit = target.ngOnInit;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnInit() {
            const /** @type {?} */ locale = InjectorRef.get(LocaleService);
            if (typeof propertyKey !== "undefined") {
                this[propertyKey] = locale.getDefaultLocale();
                // When the default locale changes, subscribes to the event & updates defaultLocale property.
                subscription = locale.defaultLocaleChanged.subscribe((defaultLocale) => {
                    this[propertyKey] = defaultLocale;
                });
            }
            if (targetNgOnInit) {
                targetNgOnInit.apply(this);
            }
        }
        target.ngOnInit = ngOnInit;
        const /** @type {?} */ targetNgOnDestroy = target.ngOnDestroy;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnDestroy() {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
            if (targetNgOnDestroy) {
                targetNgOnDestroy.apply(this);
            }
        }
        target.ngOnDestroy = ngOnDestroy;
        if (typeof propertyKey !== "undefined") {
            Object.defineProperty(target, propertyKey, {
                writable: true,
                value: undefined
            });
        }
    }
    return DecoratorFactory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Property decorator for components to provide the parameter to the l10nCurrency pipe.
 * @return {?}
 */
function Currency() {
    /**
     * @param {?} target
     * @param {?=} propertyKey
     * @return {?}
     */
    function DecoratorFactory(target, propertyKey) {
        let /** @type {?} */ subscription;
        const /** @type {?} */ targetNgOnInit = target.ngOnInit;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnInit() {
            const /** @type {?} */ locale = InjectorRef.get(LocaleService);
            if (typeof propertyKey !== "undefined") {
                this[propertyKey] = locale.getCurrentCurrency();
                // When the currency changes, subscribes to the event & updates currency property.
                subscription = locale.currencyCodeChanged.subscribe((currency) => {
                    this[propertyKey] = currency;
                });
            }
            if (targetNgOnInit) {
                targetNgOnInit.apply(this);
            }
        }
        target.ngOnInit = ngOnInit;
        const /** @type {?} */ targetNgOnDestroy = target.ngOnDestroy;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnDestroy() {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
            if (targetNgOnDestroy) {
                targetNgOnDestroy.apply(this);
            }
        }
        target.ngOnDestroy = ngOnDestroy;
        if (typeof propertyKey !== "undefined") {
            Object.defineProperty(target, propertyKey, {
                writable: true,
                value: undefined
            });
        }
    }
    return DecoratorFactory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Property decorator for components to provide the parameter to the l10nDate pipe.
 * @return {?}
 */
function Timezone() {
    /**
     * @param {?} target
     * @param {?=} propertyKey
     * @return {?}
     */
    function DecoratorFactory(target, propertyKey) {
        let /** @type {?} */ subscription;
        const /** @type {?} */ targetNgOnInit = target.ngOnInit;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnInit() {
            const /** @type {?} */ locale = InjectorRef.get(LocaleService);
            if (typeof propertyKey !== "undefined") {
                this[propertyKey] = locale.getCurrentTimezone();
                // When the timezone changes, subscribes to the event & updates timezone property.
                subscription = locale.timezoneChanged.subscribe((zoneName) => {
                    this[propertyKey] = zoneName;
                });
            }
            if (targetNgOnInit) {
                targetNgOnInit.apply(this);
            }
        }
        target.ngOnInit = ngOnInit;
        const /** @type {?} */ targetNgOnDestroy = target.ngOnDestroy;
        /**
         * @this {?}
         * @return {?}
         */
        function ngOnDestroy() {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
            if (targetNgOnDestroy) {
                targetNgOnDestroy.apply(this);
            }
        }
        target.ngOnDestroy = ngOnDestroy;
        if (typeof propertyKey !== "undefined") {
            Object.defineProperty(target, propertyKey, {
                writable: true,
                value: undefined
            });
        }
    }
    return DecoratorFactory;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?} translation
     */
    constructor(translation) {
        this.translation = translation;
    }
    /**
     * @param {?} key
     * @param {?} lang
     * @param {?=} args
     * @return {?}
     */
    transform(key, lang, args) {
        return this.translation.translate(key, args, lang);
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'translate',
                pure: true
            },] },
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: TranslationService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} date
 * @param {?} defaultLocale
 * @param {?} options
 * @param {?=} timezone
 * @return {?}
 */
function intlDateTimeFormat(date, defaultLocale, options, timezone) {
    const /** @type {?} */ marks = /[\u200e\u200f]/g;
    options.timeZone = IntlAPI.hasTimezone() ? timezone : 'UTC';
    return new Intl.DateTimeFormat(defaultLocale, options).format(date).replace(marks, "");
}
/**
 * @param {?} options
 * @return {?}
 */
function datePartFactory(options) {
    const /** @type {?} */ dateFactory = (date, defaultLocale, timezone) => intlDateTimeFormat(date, defaultLocale, options, timezone);
    return dateFactory;
}
/**
 * @param {?} options
 * @return {?}
 */
function combine(options) {
    const /** @type {?} */ reducedOptions = options.reduce((merged, opt) => (Object.assign({}, merged, opt)), {});
    return reducedOptions;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function digitCondition(prop, len) {
    const /** @type {?} */ result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function nameCondition(prop, len) {
    const /** @type {?} */ result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    }
    else {
        result[prop] = 'long';
    }
    return result;
}
const FORMAT_ALIASES = {
    'short': datePartFactory(combine([
        digitCondition('year', 1),
        digitCondition('month', 1),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1)
    ])),
    'medium': datePartFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1),
        digitCondition('second', 1),
    ])),
    'shortDate': datePartFactory(combine([
        digitCondition('year', 1),
        digitCondition('month', 1),
        digitCondition('day', 1)
    ])),
    'mediumDate': datePartFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1)
    ])),
    'longDate': datePartFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 4),
        digitCondition('day', 1)
    ])),
    'fullDate': datePartFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 4),
        nameCondition('weekday', 4),
        digitCondition('day', 1)
    ])),
    'shortTime': datePartFactory(combine([
        digitCondition('hour', 1),
        digitCondition('minute', 1)
    ])),
    'mediumTime': datePartFactory(combine([
        digitCondition('hour', 1),
        digitCondition('second', 1),
        digitCondition('minute', 1)
    ])),
};
class IntlFormatter {
    /**
     * @param {?} num
     * @param {?} defaultLocale
     * @param {?} style
     * @param {?=} digits
     * @param {?=} currency
     * @param {?=} currencyDisplay
     * @return {?}
     */
    static formatNumber(num, defaultLocale, style, digits, currency, currencyDisplay) {
        let /** @type {?} */ minInt;
        let /** @type {?} */ minFraction;
        let /** @type {?} */ maxFraction;
        if (style !== NumberFormatStyle.Currency) {
            minInt = 1;
            minFraction = 0;
            maxFraction = 3;
        }
        if (!!digits) {
            const /** @type {?} */ NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
            const /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);
            if (parts != null) {
                if (parts[1] != null) {
                    // Min integer digits.
                    minInt = parseInt(parts[1]);
                }
                if (parts[3] != null) {
                    // Min fraction digits.
                    minFraction = parseInt(parts[3]);
                }
                if (parts[5] != null) {
                    // Max fraction digits.
                    maxFraction = parseInt(parts[5]);
                }
            }
        }
        return IntlFormatter.numberFormatter(num, defaultLocale, style, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyDisplay: currencyDisplay
        });
    }
    /**
     * @param {?} date
     * @param {?} defaultLocale
     * @param {?} format
     * @param {?=} timezone
     * @return {?}
     */
    static formatDate(date, defaultLocale, format, timezone) {
        return IntlFormatter.dateTimeFormatter(date, defaultLocale, format, timezone);
    }
    /**
     * @param {?} num
     * @param {?} defaultLocale
     * @param {?} style
     * @param {?=} opts
     * @return {?}
     */
    static numberFormatter(num, defaultLocale, style, opts = {}) {
        const { minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency, currencyDisplay } = opts;
        const /** @type {?} */ options = {
            minimumIntegerDigits,
            minimumFractionDigits,
            maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
        };
        if (style == NumberFormatStyle.Currency) {
            options.currency = currency;
            options.currencyDisplay = currencyDisplay;
        }
        return new Intl.NumberFormat(defaultLocale, options).format(num);
    }
    /**
     * @param {?} date
     * @param {?} defaultLocale
     * @param {?} format
     * @param {?=} timezone
     * @return {?}
     */
    static dateTimeFormatter(date, defaultLocale, format, timezone) {
        let /** @type {?} */ options = {};
        if (typeof format === "string") {
            const /** @type {?} */ fnFormatAliases = FORMAT_ALIASES[format];
            if (fnFormatAliases)
                return fnFormatAliases(date, defaultLocale, timezone);
        }
        else {
            options = format;
        }
        // If the format is wrong, returns the default Intl format.
        return intlDateTimeFormat(date, defaultLocale, options, timezone);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class L10nDatePipe {
    constructor() {
        this.ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    }
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} format
     * @param {?=} timezone
     * @return {?}
     */
    transform(value, defaultLocale, format = 'mediumDate', timezone) {
        if (value == null || value === "" || value !== value)
            return null;
        if (typeof defaultLocale === "undefined")
            return null;
        if (IntlAPI.hasDateTimeFormat()) {
            let /** @type {?} */ date;
            if (typeof value === "string") {
                value = value.trim();
            }
            if (this.isDate(value)) {
                date = value;
            }
            else if (!isNaN(value - parseFloat(value))) {
                date = new Date(parseFloat(value));
            }
            else if (typeof value === "string" && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
                const [y, m, d] = value.split('-').map((val) => parseInt(val, 10));
                date = new Date(y, m - 1, d);
            }
            else {
                date = new Date(value);
            }
            if (!this.isDate(date)) {
                let /** @type {?} */ match;
                if ((typeof value === "string") && (match = value.match(this.ISO8601_DATE_REGEX))) {
                    date = this.isoStringToDate(match);
                }
            }
            return IntlFormatter.formatDate(date, defaultLocale, format, timezone);
        }
        // Returns the date without localization.
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isDate(value) {
        return value instanceof Date && !isNaN(value.valueOf());
    }
    /**
     * @param {?} match
     * @return {?}
     */
    isoStringToDate(match) {
        const /** @type {?} */ date = new Date(0);
        let /** @type {?} */ tzHour = 0;
        let /** @type {?} */ tzMin = 0;
        const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
        const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
            tzHour = +(match[9] + match[10]);
            tzMin = +(match[9] + match[11]);
        }
        dateSetter.call(date, +(match[1]), +(match[2]) - 1, +(match[3]));
        const /** @type {?} */ h = +(match[4] || '0') - tzHour;
        const /** @type {?} */ m = +(match[5] || '0') - tzMin;
        const /** @type {?} */ s = +(match[6] || '0');
        const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
    }
}
L10nDatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'l10nDate',
                pure: true
            },] },
];
/** @nocollapse */
L10nDatePipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class L10nDecimalPipe {
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    transform(value, defaultLocale, digits) {
        if (value == null)
            return null;
        if (typeof defaultLocale === "undefined")
            return null;
        if (IntlAPI.hasNumberFormat()) {
            value = typeof value === "string" && !isNaN(+value - parseFloat(value)) ? +value : value;
            return IntlFormatter.formatNumber(value, defaultLocale, NumberFormatStyle.Decimal, digits);
        }
        // Returns the number without localization.
        return value;
    }
}
L10nDecimalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'l10nDecimal',
                pure: true
            },] },
];
/** @nocollapse */
L10nDecimalPipe.ctorParameters = () => [];
class L10nPercentPipe {
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?=} digits
     * @return {?}
     */
    transform(value, defaultLocale, digits) {
        if (value == null)
            return null;
        if (typeof defaultLocale === "undefined")
            return null;
        if (IntlAPI.hasNumberFormat()) {
            value = typeof value === "string" && !isNaN(+value - parseFloat(value)) ? +value : value;
            return IntlFormatter.formatNumber(value, defaultLocale, NumberFormatStyle.Percent, digits);
        }
        // Returns the number without localization.
        return value;
    }
}
L10nPercentPipe.decorators = [
    { type: Pipe, args: [{
                name: 'l10nPercent',
                pure: true
            },] },
];
/** @nocollapse */
L10nPercentPipe.ctorParameters = () => [];
class L10nCurrencyPipe {
    /**
     * @param {?} value
     * @param {?} defaultLocale
     * @param {?} currency
     * @param {?=} currencyDisplay
     * @param {?=} digits
     * @return {?}
     */
    transform(value, defaultLocale, currency, currencyDisplay = 'symbol', digits) {
        if (value == null)
            return null;
        if (typeof defaultLocale === "undefined" || typeof currency === "undefined")
            return null;
        if (IntlAPI.hasNumberFormat()) {
            value = typeof value === "string" && !isNaN(+value - parseFloat(value)) ? +value : value;
            return IntlFormatter.formatNumber(value, defaultLocale, NumberFormatStyle.Currency, digits, currency, currencyDisplay);
        }
        // Returns the number & currency without localization.
        return value + " " + currency;
    }
}
L10nCurrencyPipe.decorators = [
    { type: Pipe, args: [{
                name: 'l10nCurrency',
                pure: true
            },] },
];
/** @nocollapse */
L10nCurrencyPipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Breadth First Search (BFS) algorithm for traversing & searching tree data structure of DOM
 * explores the neighbor nodes first, before moving to the next level neighbors.
 * Time complexity: between O(1) and O(|V|^2).
 */
class BFS {
    /**
     * Target node is a non empty text node.
     * @param {?} rootNode
     * @return {?}
     */
    static getTargetNode(rootNode) {
        return BFS.walk(rootNode);
    }
    /**
     * @param {?} rootNode
     * @return {?}
     */
    static walk(rootNode) {
        const /** @type {?} */ queue = [];
        let /** @type {?} */ iNode;
        let /** @type {?} */ depth = 0;
        let /** @type {?} */ nodeToDepthIncrease = 1;
        queue.push(rootNode);
        while (queue.length > 0 && depth <= this.MAX_DEPTH) {
            iNode = queue.shift();
            if (this.isTargetNode(iNode)) {
                return iNode;
            }
            if (depth < this.MAX_DEPTH && iNode.childNodes != null) {
                for (const /** @type {?} */ child of iNode.childNodes) {
                    if (this.isValidNode(child)) {
                        queue.push(child);
                    }
                }
            }
            if (--nodeToDepthIncrease == 0) {
                depth++;
                nodeToDepthIncrease = queue.length;
            }
        }
        return rootNode;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    static isTargetNode(node) {
        return typeof node !== "undefined" &&
            node.nodeType == 3 &&
            node.nodeValue != null &&
            node.nodeValue.trim() != "";
    }
    /**
     * A valid node is not marked for translation.
     * @param {?} node
     * @return {?}
     */
    static isValidNode(node) {
        if (typeof node !== "undefined" && node.nodeType == 1 && node.attributes) {
            for (const /** @type {?} */ attr of node.attributes) {
                if (attr && this.SELECTOR.test(attr.name))
                    return false;
            }
        }
        return true;
    }
}
BFS.SELECTOR = new RegExp("^l10n|translate|locale");
BFS.MAX_DEPTH = 10;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class BaseDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.attributes = [];
        this.subscriptions = [];
        this.TEXT_MUTATION_CONFIG = { subtree: true, characterData: true };
        this.SELECTOR = /^l10n-/;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.el && this.el.nativeElement) {
            this.element = this.el.nativeElement;
            this.renderNode = BFS.getTargetNode(this.element);
            this.getKey();
            this.getAttributes();
            this.addTextListener();
            this.setup();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!!this.key) {
            if (this.nodeValue == null || this.nodeValue == "") {
                if (!!this.valueAttribute) {
                    this.key = this.valueAttribute;
                }
                else if (!!this.innerHTMLProperty) {
                    this.key = this.innerHTMLProperty;
                }
            }
            this.replaceText();
        }
        if (this.attributes.length > 0) {
            this.replaceAttributes();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeTextListener();
        this.cancelSubscriptions();
    }
    /**
     * @return {?}
     */
    getAttributesData() {
        const /** @type {?} */ keys = this.getAttributesKeys();
        const /** @type {?} */ data = {};
        for (const /** @type {?} */ key of keys) {
            data[key] = this.getValues(key);
        }
        return data;
    }
    /**
     * @return {?}
     */
    getAttributesKeys() {
        return this.attributes.map((attr) => attr.key);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setText(value) {
        if (!!value) {
            if (!!this.nodeValue && !!this.key) {
                this.removeTextListener();
                this.renderer.setValue(this.renderNode, this.nodeValue.replace(this.key, value));
                this.addTextListener();
            }
            else if (!!this.valueAttribute) {
                this.renderer.setAttribute(this.element, "value", value);
            }
            else if (!!this.innerHTMLProperty) {
                this.renderer.setProperty(this.element, "innerHTML", value);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setAttributes(data) {
        for (const /** @type {?} */ attr of this.attributes) {
            this.renderer.setAttribute(this.element, attr.name, data[attr.key]);
        }
    }
    /**
     * @return {?}
     */
    addTextListener() {
        if (typeof MutationObserver !== "undefined") {
            this.textObserver = new MutationObserver((mutations) => {
                this.renderNode = BFS.getTargetNode(this.element);
                this.getKey();
                this.replaceText();
            });
            this.textObserver.observe(this.renderNode, this.TEXT_MUTATION_CONFIG);
        }
    }
    /**
     * @return {?}
     */
    removeTextListener() {
        if (typeof this.textObserver !== "undefined") {
            this.textObserver.disconnect();
        }
    }
    /**
     * @return {?}
     */
    getText() {
        this.nodeValue = this.renderNode != null ? /** @type {?} */ (this.renderNode.nodeValue) : "";
        return !!this.nodeValue ? this.nodeValue.trim() : "";
    }
    /**
     * @return {?}
     */
    getKey() {
        if (this.element.childNodes.length > 0) {
            this.key = this.getText();
        }
        else if (!!this.valueAttribute) {
            this.key = this.valueAttribute;
        }
        else if (!!this.innerHTMLProperty) {
            this.key = this.innerHTMLProperty;
        }
    }
    /**
     * @return {?}
     */
    getAttributes() {
        if (this.element.attributes) {
            for (const /** @type {?} */ attr of this.element.attributes) {
                if (attr && this.SELECTOR.test(attr.name)) {
                    const /** @type {?} */ name = attr.name.substr(5);
                    for (const /** @type {?} */ targetAttr of this.element.attributes) {
                        if (new RegExp("^" + name + "$").test(targetAttr.name)) {
                            this.attributes.push({ name: name, key: targetAttr.value });
                        }
                    }
                }
            }
        }
    }
    /**
     * @return {?}
     */
    cancelSubscriptions() {
        this.subscriptions.forEach((subscription) => {
            if (typeof subscription !== "undefined") {
                subscription.unsubscribe();
            }
        });
    }
}
BaseDirective.propDecorators = {
    "valueAttribute": [{ type: Input, args: ['value',] },],
    "innerHTMLProperty": [{ type: Input, args: ['innerHTML',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TranslateDirective extends BaseDirective {
    /**
     * @param {?} translation
     * @param {?} el
     * @param {?} renderer
     */
    constructor(translation, el, renderer) {
        super(el, renderer);
        this.translation = translation;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    set l10nTranslate(params) {
        this.params = params;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    set translate(params) {
        this.params = params;
    }
    /**
     * @return {?}
     */
    setup() {
        this.replace();
        this.subscriptions.push(this.translation.translationChanged().subscribe(() => { this.replace(); }));
    }
    /**
     * @return {?}
     */
    replace() {
        this.replaceText();
        this.replaceAttributes();
    }
    /**
     * @return {?}
     */
    replaceText() {
        if (!!this.key) {
            this.setText(this.getValues(this.key));
        }
    }
    /**
     * @return {?}
     */
    replaceAttributes() {
        if (this.attributes.length > 0) {
            const /** @type {?} */ keys = this.getAttributesKeys();
            this.setAttributes(this.getValues(keys));
        }
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    getValues(keys) {
        return this.translation.translate(keys, this.params);
    }
}
TranslateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nTranslate],[translate]'
            },] },
];
/** @nocollapse */
TranslateDirective.ctorParameters = () => [
    { type: TranslationService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
TranslateDirective.propDecorators = {
    "l10nTranslate": [{ type: Input },],
    "translate": [{ type: Input },],
    "params": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class L10nDateDirective extends BaseDirective {
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    constructor(locale, el, renderer) {
        super(el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.defaultFormat = 'mediumDate';
        this.l10nDatePipe = new L10nDatePipe();
    }
    /**
     * @param {?} format
     * @return {?}
     */
    set l10nDate(format) {
        this.format = format;
    }
    /**
     * @return {?}
     */
    setup() {
        this.replace();
        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(() => { this.replace(); }));
        this.subscriptions.push(this.locale.timezoneChanged.subscribe(() => { this.replace(); }));
    }
    /**
     * @return {?}
     */
    replace() {
        this.replaceText();
        this.replaceAttributes();
    }
    /**
     * @return {?}
     */
    replaceText() {
        if (!!this.key) {
            this.setText(this.getValues(this.key));
        }
    }
    /**
     * @return {?}
     */
    replaceAttributes() {
        if (this.attributes.length > 0) {
            this.setAttributes(this.getAttributesData());
        }
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    getValues(keys) {
        return this.l10nDatePipe.transform(keys, this.locale.getDefaultLocale(), this.format || this.defaultFormat, this.locale.getCurrentTimezone());
    }
}
L10nDateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nDate]'
            },] },
];
/** @nocollapse */
L10nDateDirective.ctorParameters = () => [
    { type: LocaleService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
L10nDateDirective.propDecorators = {
    "l10nDate": [{ type: Input },],
    "format": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class L10nDecimalDirective extends BaseDirective {
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    constructor(locale, el, renderer) {
        super(el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.l10nDecimalPipe = new L10nDecimalPipe();
    }
    /**
     * @param {?} digits
     * @return {?}
     */
    set l10nDecimal(digits) {
        this.digits = digits;
    }
    /**
     * @return {?}
     */
    setup() {
        this.replace();
        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(() => { this.replace(); }));
    }
    /**
     * @return {?}
     */
    replace() {
        this.replaceText();
        this.replaceAttributes();
    }
    /**
     * @return {?}
     */
    replaceText() {
        if (!!this.key) {
            this.setText(this.getValues(this.key));
        }
    }
    /**
     * @return {?}
     */
    replaceAttributes() {
        if (this.attributes.length > 0) {
            this.setAttributes(this.getAttributesData());
        }
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    getValues(keys) {
        return this.l10nDecimalPipe.transform(keys, this.locale.getDefaultLocale(), this.digits);
    }
}
L10nDecimalDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nDecimal]'
            },] },
];
/** @nocollapse */
L10nDecimalDirective.ctorParameters = () => [
    { type: LocaleService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
L10nDecimalDirective.propDecorators = {
    "l10nDecimal": [{ type: Input },],
    "digits": [{ type: Input },],
};
class L10nPercentDirective extends BaseDirective {
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    constructor(locale, el, renderer) {
        super(el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.l10nPercentPipe = new L10nPercentPipe();
    }
    /**
     * @param {?} digits
     * @return {?}
     */
    set l10nPercent(digits) {
        this.digits = digits;
    }
    /**
     * @return {?}
     */
    setup() {
        this.replace();
        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(() => { this.replace(); }));
    }
    /**
     * @return {?}
     */
    replace() {
        this.replaceText();
        this.replaceAttributes();
    }
    /**
     * @return {?}
     */
    replaceText() {
        if (!!this.key) {
            this.setText(this.getValues(this.key));
        }
    }
    /**
     * @return {?}
     */
    replaceAttributes() {
        if (this.attributes.length > 0) {
            this.setAttributes(this.getAttributesData());
        }
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    getValues(keys) {
        return this.l10nPercentPipe.transform(keys, this.locale.getDefaultLocale(), this.digits);
    }
}
L10nPercentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nPercent]'
            },] },
];
/** @nocollapse */
L10nPercentDirective.ctorParameters = () => [
    { type: LocaleService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
L10nPercentDirective.propDecorators = {
    "l10nPercent": [{ type: Input },],
    "digits": [{ type: Input },],
};
class L10nCurrencyDirective extends BaseDirective {
    /**
     * @param {?} locale
     * @param {?} el
     * @param {?} renderer
     */
    constructor(locale, el, renderer) {
        super(el, renderer);
        this.locale = locale;
        this.el = el;
        this.renderer = renderer;
        this.l10nCurrencyPipe = new L10nCurrencyPipe();
    }
    /**
     * @param {?} digits
     * @return {?}
     */
    set l10nCurrency(digits) {
        this.digits = digits;
    }
    /**
     * @return {?}
     */
    setup() {
        this.replace();
        this.subscriptions.push(this.locale.defaultLocaleChanged.subscribe(() => { this.replace(); }));
        this.subscriptions.push(this.locale.currencyCodeChanged.subscribe(() => { this.replace(); }));
    }
    /**
     * @return {?}
     */
    replace() {
        this.replaceText();
        this.replaceAttributes();
    }
    /**
     * @return {?}
     */
    replaceText() {
        if (!!this.key) {
            this.setText(this.getValues(this.key));
        }
    }
    /**
     * @return {?}
     */
    replaceAttributes() {
        if (this.attributes.length > 0) {
            this.setAttributes(this.getAttributesData());
        }
    }
    /**
     * @param {?} keys
     * @return {?}
     */
    getValues(keys) {
        return this.l10nCurrencyPipe.transform(keys, this.locale.getDefaultLocale(), this.locale.getCurrentCurrency(), this.currencyDisplay, this.digits);
    }
}
L10nCurrencyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nCurrency]'
            },] },
];
/** @nocollapse */
L10nCurrencyDirective.ctorParameters = () => [
    { type: LocaleService, },
    { type: ElementRef, },
    { type: Renderer2, },
];
L10nCurrencyDirective.propDecorators = {
    "l10nCurrency": [{ type: Input },],
    "currencyDisplay": [{ type: Input },],
    "digits": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.
 * @param {?} digits The format of the number
 * @param {?=} MIN_VALUE The minimum value for the number
 * @param {?=} MAX_VALUE The maximum value for the number
 * @return {?} An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid
 */
function l10nValidateNumber(digits, MIN_VALUE = Number.MIN_VALUE, MAX_VALUE = Number.MAX_VALUE) {
    const /** @type {?} */ locale = InjectorRef.get(LocaleService);
    const /** @type {?} */ localeValidation = InjectorRef.get(LocaleValidation);
    let /** @type {?} */ defaultLocale;
    let /** @type {?} */ NUMBER_REGEXP;
    return (formControl) => {
        if (formControl.value == null || formControl.value == "")
            return null;
        if (defaultLocale != locale.getDefaultLocale()) {
            NUMBER_REGEXP = localeValidation.getRegExp(digits);
            defaultLocale = locale.getDefaultLocale();
        }
        if (NUMBER_REGEXP.test(formControl.value)) {
            const /** @type {?} */ parsedValue = localeValidation.parseNumber(formControl.value);
            if (parsedValue != null && parsedValue < MIN_VALUE) {
                return {
                    minValue: {
                        valid: false
                    }
                };
            }
            else if (parsedValue != null && parsedValue > MAX_VALUE) {
                return {
                    maxValue: {
                        valid: false
                    }
                };
            }
            return null; // The number is valid.
        }
        else {
            return {
                format: {
                    valid: false
                }
            };
        }
    };
}
class L10nNumberValidatorDirective {
    constructor() {
        this.MIN_VALUE = Number.MIN_VALUE;
        this.MAX_VALUE = Number.MAX_VALUE;
    }
    /**
     * Format: {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}.
     * @param {?} digits
     * @return {?}
     */
    set l10nValidateNumber(digits) {
        this.digits = digits;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.validator = l10nValidateNumber(this.digits, this.minValue || this.MIN_VALUE, this.maxValue || this.MAX_VALUE);
    }
    /**
     * @param {?} formControl
     * @return {?}
     */
    validate(formControl) {
        return this.validator(formControl);
    }
}
L10nNumberValidatorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[l10nValidateNumber][ngModel],[l10nValidateNumber][formControl]',
                providers: [
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => L10nNumberValidatorDirective), multi: true }
                ]
            },] },
];
/** @nocollapse */
L10nNumberValidatorDirective.ctorParameters = () => [];
L10nNumberValidatorDirective.propDecorators = {
    "l10nValidateNumber": [{ type: Input },],
    "digits": [{ type: Input },],
    "minValue": [{ type: Input },],
    "maxValue": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides dependencies, pipes & directives for translating messages.
 */
class TranslationModule {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        // Creates the instance of the InjectorRef, so that module dependencies are available.
        this.injector = injector;
    }
    /**
     * Use in AppModule: new instances of LocaleService & TranslationService.
     * @param {?} l10nConfig
     * @param {?=} token
     * @return {?}
     */
    static forRoot(l10nConfig, token = {}) {
        return {
            ngModule: TranslationModule,
            providers: [
                InjectorRef,
                { provide: LOCALE_CONFIG, useValue: l10nConfig.locale || {} },
                { provide: TRANSLATION_CONFIG, useValue: l10nConfig.translation || {} },
                LocaleService,
                {
                    provide: LocaleStorage,
                    useClass: token.localeStorage || BrowserStorage
                },
                TranslationService,
                {
                    provide: TranslationProvider,
                    useClass: token.translationProvider || HttpTranslationProvider
                },
                {
                    provide: TranslationHandler,
                    useClass: token.translationHandler || DefaultTranslationHandler
                },
                L10nLoader
            ]
        };
    }
    /**
     * Use in feature modules with lazy loading: new instance of TranslationService.
     * @param {?} l10nConfig
     * @param {?=} token
     * @return {?}
     */
    static forChild(l10nConfig, token = {}) {
        return {
            ngModule: TranslationModule,
            providers: [
                InjectorRef,
                { provide: TRANSLATION_CONFIG, useValue: l10nConfig.translation || {} },
                TranslationService,
                L10nLoader
            ]
        };
    }
}
TranslationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TranslatePipe,
                    TranslateDirective
                ],
                exports: [
                    TranslatePipe,
                    TranslateDirective
                ]
            },] },
];
/** @nocollapse */
TranslationModule.ctorParameters = () => [
    { type: InjectorRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides dependencies, pipes & directives for translating messages, dates & numbers.
 */
class LocalizationModule {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        // Creates the instance of the InjectorRef, so that module dependencies are available.
        this.injector = injector;
    }
    /**
     * Use in AppModule: new instances of LocaleService & TranslationService.
     * @param {?} l10nConfig
     * @param {?=} token
     * @return {?}
     */
    static forRoot(l10nConfig, token = {}) {
        return {
            ngModule: LocalizationModule,
            providers: [
                InjectorRef,
                { provide: LOCALE_CONFIG, useValue: l10nConfig.locale || {} },
                { provide: TRANSLATION_CONFIG, useValue: l10nConfig.translation || {} },
                LocaleService,
                {
                    provide: LocaleStorage,
                    useClass: token.localeStorage || BrowserStorage
                },
                TranslationService,
                {
                    provide: TranslationProvider,
                    useClass: token.translationProvider || HttpTranslationProvider
                },
                {
                    provide: TranslationHandler,
                    useClass: token.translationHandler || DefaultTranslationHandler
                },
                L10nLoader
            ]
        };
    }
    /**
     * Use in feature modules with lazy loading: new instance of TranslationService.
     * @param {?} l10nConfig
     * @param {?=} token
     * @return {?}
     */
    static forChild(l10nConfig, token = {}) {
        return {
            ngModule: LocalizationModule,
            providers: [
                InjectorRef,
                { provide: TRANSLATION_CONFIG, useValue: l10nConfig.translation || {} },
                TranslationService,
                L10nLoader
            ]
        };
    }
}
LocalizationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    L10nDatePipe,
                    L10nDecimalPipe,
                    L10nPercentPipe,
                    L10nCurrencyPipe,
                    L10nDateDirective,
                    L10nDecimalDirective,
                    L10nPercentDirective,
                    L10nCurrencyDirective
                ],
                imports: [
                    TranslationModule
                ],
                exports: [
                    TranslationModule,
                    L10nDatePipe,
                    L10nDecimalPipe,
                    L10nPercentPipe,
                    L10nCurrencyPipe,
                    L10nDateDirective,
                    L10nDecimalDirective,
                    L10nPercentDirective,
                    L10nCurrencyDirective
                ]
            },] },
];
/** @nocollapse */
LocalizationModule.ctorParameters = () => [
    { type: InjectorRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Provides dependencies & directives for locale validation.
 */
class LocaleValidationModule {
    /**
     * Use in AppModule: new instance of LocaleValidation.
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: LocaleValidationModule,
            providers: [LocaleValidation]
        };
    }
}
LocaleValidationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    L10nNumberValidatorDirective
                ],
                exports: [
                    L10nNumberValidatorDirective
                ]
            },] },
];
/** @nocollapse */
LocaleValidationModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Angular l10n
 * An Angular library to translate messages, dates and numbers
 * Copyright Roberto Simonetti
 * MIT license
 * https://github.com/robisim74/angular-l10n
 */
/**
 * Entry point for all public APIs of the package.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { InjectorRef, StorageStrategy, ProviderType, ISOCode, LOCALE_CONFIG, TRANSLATION_CONFIG, L10nLoader, LocaleService, LocaleStorage, BrowserStorage, TranslationService, TranslationProvider, HttpTranslationProvider, TranslationHandler, DefaultTranslationHandler, Translation, Localization, LocaleValidation, Collator, IntlAPI, Language, DefaultLocale$1 as DefaultLocale, Currency, Timezone, TranslatePipe, L10nDatePipe, L10nDecimalPipe, L10nPercentPipe, L10nCurrencyPipe, BaseDirective, TranslateDirective, L10nDateDirective, L10nDecimalDirective, L10nPercentDirective, L10nCurrencyDirective, L10nNumberValidatorDirective, l10nValidateNumber, TranslationModule, LocalizationModule, LocaleValidationModule };
//# sourceMappingURL=angular-l10n.js.map
