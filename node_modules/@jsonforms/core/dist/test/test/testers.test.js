"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  The MIT License
  
  Copyright (c) 2018 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
const ava_1 = __importDefault(require("ava"));
const testers_1 = require("../src/testers");
ava_1.default.beforeEach(t => {
    t.context.uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
});
ava_1.default('schemaTypeIs should check type sub-schema of control', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.true(testers_1.schemaTypeIs('string')(uischema, schema));
    t.false(testers_1.schemaTypeIs('integer')(uischema, schema));
});
ava_1.default('schemaTypeIs should return false for non-control UI schema elements', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const label = {
        type: 'Label',
        text: 'some text'
    };
    t.false(testers_1.schemaTypeIs('integer')(label, schema));
});
ava_1.default('schemaTypeIs should return false for control pointing to invalid sub-schema', t => {
    const uischema = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    t.false(testers_1.schemaTypeIs('string')(uischema, schema));
});
ava_1.default('formatIs should check the format of a resolved sub-schema', t => {
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    const schema = {
        type: 'object',
        properties: {
            foo: {
                type: 'string',
                format: 'date-time'
            }
        }
    };
    t.true(testers_1.formatIs('date-time')(uischema, schema));
});
ava_1.default('uiTypeIs', t => {
    const control = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    t.true(testers_1.uiTypeIs('Control')(control, undefined));
});
ava_1.default('optionIs should check for options', t => {
    const control = {
        type: 'Control',
        scope: '#/properties/bar',
        options: {
            answer: 42
        }
    };
    t.true(testers_1.optionIs('answer', 42)(control, undefined));
});
ava_1.default('optionIs should return false for UI schema elements without options field', t => {
    const control = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    t.false(testers_1.optionIs('answer', 42)(control, undefined));
});
ava_1.default('schemaMatches should check type sub-schema of control via predicate', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.true(testers_1.schemaMatches(subSchema => subSchema.type === 'string')(uischema, schema));
});
ava_1.default('schemaMatches should return false for non-control UI schema elements', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const label = {
        type: 'Label',
        text: 'some text'
    };
    t.false(testers_1.schemaMatches(() => false)(label, schema));
});
ava_1.default('schemaMatches should return false for control pointing to invalid subschema', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    t.false(testers_1.schemaMatches(() => false)(uischema, schema));
});
ava_1.default('scopeEndsWith checks whether the ref of a control ends with a certain string', t => {
    const uischema = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    t.true(testers_1.scopeEndsWith('properties/bar')(uischema, undefined));
});
ava_1.default('scopeEndsWith should return false for non-control UI schema elements', t => {
    const label = {
        type: 'Label',
        text: 'some text'
    };
    t.false(testers_1.scopeEndsWith('properties/bar')(label, undefined));
});
ava_1.default('refEndIs checks whether the last segment a control ref equals a certain string', t => {
    const uischema = {
        type: 'Control',
        scope: '#/properties/bar'
    };
    t.true(testers_1.scopeEndIs('bar')(uischema, undefined));
});
ava_1.default('refEndIs should return false for non-control UI schema elements', t => {
    const label = {
        type: 'Label',
        text: 'some text'
    };
    t.false(testers_1.scopeEndIs('bar')(label, undefined));
});
ava_1.default('and should allow to compose multiple testers', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'string' }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.true(testers_1.and(testers_1.schemaTypeIs('string'), testers_1.scopeEndIs('foo'))(uischema, schema));
});
ava_1.default('or should allow to compose multiple testers', t => {
    const schema = {
        type: 'object',
        properties: {
            foo: { type: 'integer' }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.true(testers_1.or(testers_1.schemaTypeIs('integer'), testers_1.optionIs('slider', true))(uischema, schema));
});
ava_1.default('tester isPrimitiveArrayControl', t => {
    const control = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.true(testers_1.isPrimitiveArrayControl(control, {
        type: 'object',
        properties: {
            foo: {
                type: 'array',
                items: { type: 'integer' }
            }
        }
    }), `Primitive array tester was not triggered for 'integer' schema type`);
    t.false(testers_1.isPrimitiveArrayControl(control, {
        type: 'object',
        properties: {
            foo: {
                type: 'array',
                items: { type: 'object' }
            }
        }
    }), `Primitive array tester was not triggered for 'object' schema type`);
});
ava_1.default('tester isObjectArrayControl', t => {
    t.false(testers_1.isObjectArrayControl({ type: 'Foo' }, null));
    const control = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    t.false(testers_1.isObjectArrayControl(control, undefined), 'No Schema not checked!');
    t.false(testers_1.isObjectArrayControl(control, {
        type: 'object',
        properties: { bar: { type: 'integer' } }
    }), 'Wrong Schema Type not checked!');
    t.false(testers_1.isObjectArrayControl(control, {
        type: 'object',
        properties: { foo: { type: 'array' } }
    }), 'Array Schema Type without items not checked!');
    t.false(testers_1.isObjectArrayControl(control, {
        type: 'object',
        properties: {
            foo: {
                type: 'array',
                items: [{ type: 'integer' }, { type: 'string' }]
            }
        }
    }), 'Array Schema Type with tuples not checked!');
    t.false(testers_1.isObjectArrayControl(control, {
        type: 'object',
        properties: {
            foo: {
                type: 'array',
                items: { type: 'integer' }
            }
        }
    }), 'Array Schema Type with wrong item type not checked!');
    const schema = {
        type: 'object',
        properties: {
            foo: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        x: { type: 'integer' },
                        y: { type: 'integer' }
                    }
                }
            }
        }
    };
    t.true(testers_1.isObjectArrayControl(control, schema));
});
ava_1.default('isBooleanControl', t => {
    t.false(testers_1.isBooleanControl(undefined, undefined));
    t.false(testers_1.isBooleanControl(null, undefined));
    t.false(testers_1.isBooleanControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isBooleanControl({ type: 'Control' }, undefined));
    t.false(testers_1.isBooleanControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isBooleanControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' }, bar: { type: 'boolean' } }
    }));
    t.true(testers_1.isBooleanControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'boolean' } }
    }));
});
ava_1.default('test isDateControl', t => {
    t.false(testers_1.isDateControl(undefined, undefined));
    t.false(testers_1.isDateControl(null, undefined));
    t.false(testers_1.isDateControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isDateControl({ type: 'Control' }, undefined));
    t.false(testers_1.isDateControl(t.context.uischmea, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isDateControl(t.context.uischema, {
        type: 'object',
        properties: {
            foo: { type: 'string' },
            bar: {
                type: 'string',
                format: 'date'
            }
        }
    }));
    t.true(testers_1.isDateControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string', format: 'date' } }
    }));
});
ava_1.default('test isEnumControl', t => {
    t.false(testers_1.isEnumControl(undefined, undefined));
    t.false(testers_1.isEnumControl(null, undefined));
    t.false(testers_1.isEnumControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isEnumControl({ type: 'Control' }, undefined));
    t.false(testers_1.isEnumControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isEnumControl(t.context.uischema, {
        type: 'object',
        properties: {
            foo: {
                type: 'string'
            },
            bar: {
                type: 'string',
                enum: ['a', 'b']
            }
        }
    }));
    t.true(testers_1.isEnumControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string', enum: ['a', 'b'] } }
    }));
    t.true(testers_1.isEnumControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'number', enum: [1, 2] } }
    }));
});
ava_1.default('test isIntegerControl', t => {
    t.false(testers_1.isIntegerControl(undefined, undefined));
    t.false(testers_1.isIntegerControl(null, undefined));
    t.false(testers_1.isIntegerControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isIntegerControl({ type: 'Control' }, undefined));
    t.false(testers_1.isIntegerControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isIntegerControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' }, bar: { type: 'integer' } }
    }));
    t.true(testers_1.isIntegerControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'integer' } }
    }));
});
ava_1.default('test isNumberControl', t => {
    t.false(testers_1.isNumberControl(undefined, undefined));
    t.false(testers_1.isNumberControl(null, undefined));
    t.false(testers_1.isNumberControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isNumberControl({ type: 'Control' }, undefined));
    t.false(testers_1.isNumberControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isNumberControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' }, bar: { type: 'number' } }
    }));
    t.true(testers_1.isNumberControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'number' } }
    }));
});
ava_1.default('tester isStringControl', t => {
    t.false(testers_1.isStringControl(undefined, undefined));
    t.false(testers_1.isStringControl(null, undefined));
    t.false(testers_1.isStringControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isStringControl({ type: 'Control' }, undefined));
    t.false(testers_1.isStringControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'number' } }
    }));
    t.false(testers_1.isStringControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'number' }, bar: { type: 'string' } }
    }));
    t.true(testers_1.isStringControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
});
ava_1.default('test isTimeControl', t => {
    t.false(testers_1.isTimeControl(undefined, undefined));
    t.false(testers_1.isTimeControl(null, undefined));
    t.false(testers_1.isTimeControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isTimeControl({ type: 'Control' }, undefined));
    t.false(testers_1.isTimeControl(t.context.uischmea, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    t.false(testers_1.isTimeControl(t.context.uischema, {
        type: 'object',
        properties: {
            foo: { type: 'string' },
            bar: { type: 'string', format: 'time' }
        }
    }));
    t.true(testers_1.isTimeControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string', format: 'time' } }
    }));
});
ava_1.default('tester isMultiLineControl', t => {
    t.false(testers_1.isMultiLineControl(undefined, undefined));
    t.false(testers_1.isMultiLineControl(null, undefined));
    t.false(testers_1.isMultiLineControl({ type: 'Foo' }, undefined));
    t.false(testers_1.isMultiLineControl({ type: 'Control' }, undefined));
    t.false(testers_1.isMultiLineControl(t.context.uischema, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
    const control = t.context.uischema;
    control.options = { multi: true };
    t.true(testers_1.isMultiLineControl(control, {
        type: 'object',
        properties: { foo: { type: 'string' } }
    }));
});
ava_1.default('tester isObjectArrayWithNesting', t => {
    const schema = {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                    maxLength: 3
                },
                done: {
                    type: 'boolean'
                }
            }
        }
    };
    const nestedSchema = {
        type: 'array',
        items: Object.assign({}, schema)
    };
    const uischema = {
        type: 'Control',
        scope: '#'
    };
    const nestedSchema2 = {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                objectarrayofstrings: {
                    type: 'object',
                    properties: {
                        choices: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    };
    const nestedSchema3 = {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                Level2: {
                    type: 'object',
                    properties: {
                        Level3: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    };
    const uischemaOptions = {
        default: {
            type: 'Control',
            scope: '#',
            options: {
                detail: 'DEFAULT'
            }
        },
        generate: {
            type: 'Control',
            scope: '#',
            options: {
                detail: 'GENERATE'
            }
        },
        inline: {
            type: 'Control',
            scope: '#',
            options: {
                detail: {
                    type: 'HorizontalLayout',
                    elements: [
                        {
                            type: 'Control',
                            scope: '#/properties/message'
                        }
                    ]
                }
            }
        }
    };
    t.false(testers_1.isObjectArrayWithNesting(undefined, undefined));
    t.false(testers_1.isObjectArrayWithNesting(null, undefined));
    t.false(testers_1.isObjectArrayWithNesting({ type: 'Foo' }, undefined));
    t.false(testers_1.isObjectArrayWithNesting({ type: 'Control' }, undefined));
    t.false(testers_1.isObjectArrayWithNesting(uischema, schema));
    t.true(testers_1.isObjectArrayWithNesting(uischema, nestedSchema));
    t.true(testers_1.isObjectArrayWithNesting(uischema, nestedSchema2));
    t.true(testers_1.isObjectArrayWithNesting(uischema, nestedSchema3));
    t.false(testers_1.isObjectArrayWithNesting(uischemaOptions.default, schema));
    t.true(testers_1.isObjectArrayWithNesting(uischemaOptions.generate, schema));
    t.true(testers_1.isObjectArrayWithNesting(uischemaOptions.inline, schema));
});
//# sourceMappingURL=data:application/json;base64,