"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  The MIT License

  Copyright (c) 2018 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
const ava_1 = __importDefault(require("ava"));
const uischema_1 = require("../../src/generators/uischema");
ava_1.default('generate ui schema for Control element by resolving refs', t => {
    const schema = {
        type: 'object',
        properties: {
            type: {
                type: 'string',
                const: 'Control',
                default: 'Control'
            },
            label: {
                type: 'string'
            },
            scope: {
                $ref: '#/definitions/scope'
            },
            rule: {
                $ref: '#/definitions/rule'
            }
        },
        required: ['type', 'scope'],
        definitions: {
            scope: {
                type: 'string',
                pattern: '^#\\/properties\\/{1}'
            },
            rule: {
                type: 'object',
                properties: {
                    effect: {
                        type: 'string',
                        enum: ['HIDE', 'SHOW', 'DISABLE', 'ENABLE']
                    },
                    condition: {
                        type: 'object',
                        properties: {
                            type: {
                                type: 'string',
                                const: 'LEAF'
                            },
                            scope: {
                                $ref: '#/definitions/scope'
                            },
                            expectedValue: {
                                type: ['string', 'integer', 'number', 'boolean']
                            }
                        },
                        required: ['type', 'scope', 'expectedValue']
                    }
                },
                required: ['effect', 'condition']
            }
        }
    };
    const ruleLabel = {
        type: 'Label',
        text: 'Rule'
    };
    const conditionLabel = {
        type: 'Label',
        text: 'Condition'
    };
    const typeControl = {
        type: 'Control',
        label: 'Type',
        scope: '#/properties/type'
    };
    const labelControl = {
        type: 'Control',
        label: 'Label',
        scope: '#/properties/label'
    };
    const scopeControl = {
        type: 'Control',
        label: 'Scope',
        scope: '#/properties/scope'
    };
    const effectControl = {
        type: 'Control',
        label: 'Effect',
        scope: '#/properties/rule/properties/effect'
    };
    const conditionTypeControl = {
        type: 'Control',
        label: 'Type',
        scope: '#/properties/rule/properties/condition/properties/type'
    };
    const conditionScopeControl = {
        type: 'Control',
        label: 'Scope',
        scope: '#/properties/rule/properties/condition/properties/scope'
    };
    const conditionExpectedValueControl = {
        type: 'Control',
        label: 'Expected Value',
        scope: '#/properties/rule/properties/condition/properties/expectedValue'
    };
    const conditionLayout = {
        type: 'VerticalLayout',
        elements: [
            conditionLabel,
            conditionTypeControl,
            conditionScopeControl,
            conditionExpectedValueControl
        ]
    };
    const ruleLayout = {
        type: 'VerticalLayout',
        elements: [ruleLabel, effectControl, conditionLayout]
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [typeControl, labelControl, scopeControl, ruleLayout]
    };
    const generatedUiSchema = uischema_1.generateDefaultUISchema(schema);
    t.deepEqual(generatedUiSchema, uischema);
});
ava_1.default('generate ui schema for schema w/o properties', t => {
    const schema = {
        type: 'object'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: []
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate ui schema for schema with one property', t => {
    const schema = {
        type: 'object',
        properties: {
            name: {
                type: 'string'
            }
        }
    };
    const control = {
        type: 'Control',
        label: 'Name',
        scope: '#/properties/name'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate ui schema for schema without object root', t => {
    const schema = {
        type: 'string'
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate ui schema for schema with unspecified object root', t => {
    const schema = {
        properties: {
            age: {
                type: 'integer'
            }
        }
    };
    const controlElement = {
        type: 'Control',
        label: 'Age',
        scope: '#/properties/age'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [controlElement]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default(`nested object attributes`, t => {
    const schema = {
        type: 'object',
        properties: {
            id: {
                type: 'string'
            },
            private: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    }
                }
            }
        }
    };
    const idControl = {
        type: 'Control',
        label: 'Id',
        scope: '#/properties/id'
    };
    const nameControl = {
        type: 'Control',
        label: 'Name',
        scope: '#/properties/private/properties/name'
    };
    const nestedLayout = {
        type: 'VerticalLayout',
        elements: [nameControl]
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [idControl, nestedLayout]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default(`don't ignore non-json-schema id attributes`, t => {
    const schema = {
        type: 'object',
        properties: {
            id: {
                type: 'string'
            },
            name: {
                type: 'string'
            }
        }
    };
    const idControl = {
        type: 'Control',
        label: 'Id',
        scope: '#/properties/id'
    };
    const nameControl = {
        type: 'Control',
        label: 'Name',
        scope: '#/properties/name'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [idControl, nameControl]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate ui schema for schema with multiple properties', t => {
    const schema = {
        type: 'object',
        properties: {
            id: {
                type: 'string',
                format: 'objectId'
            },
            lastName: {
                type: 'string'
            },
            email: {
                type: 'string'
            },
            firstName: {
                type: 'string'
            },
            gender: {
                type: 'string',
                enum: ['Male', 'Female']
            },
            active: {
                type: 'boolean'
            },
            registrationTime: {
                type: 'string',
                format: 'date-time'
            },
            weight: {
                type: 'number'
            },
            height: {
                type: 'integer'
            },
            nationality: {
                type: 'string',
                enum: ['German', 'French', 'UK', 'US', 'Spanish', 'Italian', 'Russian']
            },
            birthDate: {
                type: 'string',
                format: 'date-time'
            }
        },
        additionalProperties: false,
        required: ['id', 'lastName', 'email']
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [
            {
                type: 'Control',
                label: 'Id',
                scope: '#/properties/id'
            },
            {
                type: 'Control',
                label: 'Last Name',
                scope: '#/properties/lastName'
            },
            {
                type: 'Control',
                label: 'Email',
                scope: '#/properties/email'
            },
            {
                type: 'Control',
                label: 'First Name',
                scope: '#/properties/firstName'
            },
            {
                type: 'Control',
                label: 'Gender',
                scope: '#/properties/gender'
            },
            {
                type: 'Control',
                label: 'Active',
                scope: '#/properties/active'
            },
            {
                type: 'Control',
                label: 'Registration Time',
                scope: '#/properties/registrationTime'
            },
            {
                type: 'Control',
                label: 'Weight',
                scope: '#/properties/weight'
            },
            {
                type: 'Control',
                label: 'Height',
                scope: '#/properties/height'
            },
            {
                type: 'Control',
                label: 'Nationality',
                scope: '#/properties/nationality'
            },
            {
                type: 'Control',
                label: 'Birth Date',
                scope: '#/properties/birthDate'
            }
        ]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate named array control', t => {
    const schema = {
        type: 'object',
        properties: {
            comments: {
                type: 'array',
                items: {
                    properties: {
                        msg: { type: 'string' }
                    }
                }
            }
        }
    };
    const control = {
        label: 'Comments',
        type: 'Control',
        scope: '#/properties/comments'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate unnamed array control', t => {
    const schema = {
        type: 'array',
        items: {
            properties: {
                msg: { type: 'string' }
            }
        }
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate unnamed array control w/o type', t => {
    const schema = {
        items: {
            properties: {
                msg: { type: 'string' }
            }
        }
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate for empty schema', t => {
    const schema = {};
    const uischema = null;
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate for null schema', t => {
    const schema = null;
    const uischema = null;
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate for undefined schema', t => {
    const schema = undefined;
    const uischema = null;
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate control for oneOf', t => {
    const schema = {
        oneOf: [
            {
                properties: {
                    name: {
                        type: 'string'
                    }
                }
            },
            {
                type: 'number'
            }
        ]
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate control for anyOf', t => {
    const schema = {
        anyOf: [
            {
                properties: {
                    name: {
                        type: 'string'
                    }
                }
            },
            {
                type: 'number'
            }
        ]
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate control for allOf', t => {
    const schema = {
        allOf: [
            {
                properties: {
                    name: {
                        type: 'string'
                    }
                }
            },
            {
                type: 'number'
            }
        ]
    };
    const control = {
        label: '',
        type: 'Control',
        scope: '#'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('no separate control for oneOf in array', t => {
    const schema = {
        properties: {
            myarray: {
                items: {
                    oneOf: [
                        {
                            properties: {
                                name: {
                                    type: 'string'
                                }
                            }
                        },
                        {
                            type: 'number'
                        }
                    ]
                }
            }
        }
    };
    const control = {
        label: 'Myarray',
        type: 'Control',
        scope: '#/properties/myarray'
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
ava_1.default('generate control for nested oneOf', t => {
    const schema = {
        properties: {
            myarray: {
                properties: {
                    nameOrAge: {
                        oneOf: [
                            {
                                properties: {
                                    name: {
                                        type: 'string'
                                    }
                                }
                            },
                            {
                                type: 'number'
                            }
                        ]
                    }
                }
            }
        }
    };
    const control = {
        label: 'Name Or Age',
        type: 'Control',
        scope: '#/properties/myarray/properties/nameOrAge'
    };
    const nestedUiSchema = {
        type: 'VerticalLayout',
        elements: [control]
    };
    const uischema = {
        type: 'VerticalLayout',
        elements: [nestedUiSchema]
    };
    t.deepEqual(uischema_1.generateDefaultUISchema(schema), uischema);
});
//# sourceMappingURL=data:application/json;base64,