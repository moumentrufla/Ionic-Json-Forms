"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  The MIT License
  
  Copyright (c) 2018 EclipseSource Munich
  https://github.com/eclipsesource/jsonforms
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/
const actions_1 = require("../../src/actions");
const ava_1 = __importDefault(require("ava"));
const util_1 = require("../../src/util");
const redux_mock_store_1 = __importDefault(require("redux-mock-store"));
const _ = __importStar(require("lodash"));
const generators_1 = require("../../src/generators");
const src_1 = require("../../src");
const reducers_1 = require("../../src/reducers");
const redux_1 = require("redux");
const middlewares = [];
const mockStore = redux_mock_store_1.default(middlewares);
const hideRule = {
    effect: src_1.RuleEffect.HIDE,
    condition: {
        type: 'LEAF',
        scope: '#/properties/firstName',
        expectedValue: 'Homer'
    }
};
const disableRule = {
    effect: src_1.RuleEffect.DISABLE,
    condition: {
        type: 'LEAF',
        scope: '#/properties/firstName',
        expectedValue: 'Homer'
    }
};
const coreUISchema = {
    type: 'Control',
    scope: '#/properties/firstName'
};
const createState = (uischema) => ({
    jsonforms: {
        core: {
            schema: {
                type: 'object',
                properties: {
                    firstName: { type: 'string' },
                    lastName: { type: 'string' }
                }
            },
            data: {
                firstName: 'Homer'
            },
            uischema,
            errors: []
        }
    }
});
ava_1.default('mapStateToControlProps - visible via ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: hideRule });
    const ownProps = {
        visible: true,
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.true(props.visible);
});
ava_1.default('mapStateToControlProps - hidden via ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: hideRule });
    const ownProps = {
        visible: false,
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.false(props.visible);
});
ava_1.default('mapStateToControlProps - hidden via state ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: hideRule });
    const ownProps = {
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.false(props.visible);
});
ava_1.default('mapStateToControlProps - visible via state ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: hideRule });
    const ownProps = {
        uischema
    };
    const clonedState = _.cloneDeep(createState(uischema));
    clonedState.jsonforms.core.data.firstName = 'Lisa';
    const props = util_1.mapStateToControlProps(clonedState, ownProps);
    t.true(props.visible);
});
ava_1.default('mapStateToControlProps - visible via state with path from ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: hideRule });
    const ownProps = {
        uischema,
        path: 'foo'
    };
    const state = {
        jsonforms: {
            core: {
                schema: {
                    type: 'object',
                    properties: {
                        firstName: { type: 'string' },
                        lastName: { type: 'string' }
                    }
                },
                data: {
                    foo: { firstName: 'Lisa' }
                },
                uischema,
                errors: []
            }
        }
    };
    const props = util_1.mapStateToControlProps(state, ownProps);
    t.true(props.visible);
});
ava_1.default('mapStateToControlProps - enabled via state with path from ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: disableRule });
    const ownProps = {
        visible: true,
        uischema,
        path: 'foo'
    };
    const state = {
        jsonforms: {
            core: {
                schema: {
                    type: 'object',
                    properties: {
                        firstName: { type: 'string' },
                        lastName: { type: 'string' }
                    }
                },
                data: {
                    foo: { firstName: 'Lisa' }
                },
                uischema,
                errors: []
            }
        }
    };
    const props = util_1.mapStateToControlProps(state, ownProps);
    t.true(props.enabled);
});
ava_1.default('mapStateToControlProps - enabled via ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: disableRule });
    const ownProps = {
        enabled: true,
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.true(props.enabled);
});
ava_1.default('mapStateToControlProps - disabled via ownProps ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: disableRule });
    const ownProps = {
        enabled: false,
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.false(props.enabled);
});
ava_1.default('mapStateToControlProps - disabled via state ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: disableRule });
    const ownProps = {
        uischema
    };
    const props = util_1.mapStateToControlProps(createState(uischema), ownProps);
    t.false(props.enabled);
});
ava_1.default('mapStateToControlProps - enabled via state ', t => {
    const uischema = Object.assign({}, coreUISchema, { rule: disableRule });
    const ownProps = {
        uischema
    };
    const clonedState = _.cloneDeep(createState(uischema));
    clonedState.jsonforms.core.data.firstName = 'Lisa';
    const props = util_1.mapStateToControlProps(clonedState, ownProps);
    t.true(props.enabled);
});
ava_1.default('mapStateToControlProps - path', t => {
    const ownProps = {
        uischema: coreUISchema
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.path, 'firstName');
});
ava_1.default('mapStateToControlProps - compose path with ownProps.path', t => {
    const ownProps = {
        uischema: coreUISchema,
        path: 'yo'
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.path, 'yo.firstName');
    t.is(props.parentPath, 'yo');
});
ava_1.default('mapStateToControlProps - derive label', t => {
    const ownProps = {
        uischema: coreUISchema
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.label, 'First Name');
});
ava_1.default('mapStateToControlProps - derive label', t => {
    const ownProps = {
        uischema: Object.assign({}, coreUISchema, { label: {
                show: false
            } })
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.label, '');
});
ava_1.default('mapStateToControlProps - data', t => {
    const ownProps = {
        uischema: coreUISchema
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.data, 'Homer');
});
ava_1.default('mapStateToControlProps - errors', t => {
    const ownProps = {
        uischema: coreUISchema
    };
    const clonedState = _.cloneDeep(createState(coreUISchema));
    const error = {
        dataPath: 'firstName',
        message: 'Duff beer',
        keyword: 'whatever',
        schemaPath: '',
        params: undefined
    };
    clonedState.jsonforms.core.errors = [error];
    const props = util_1.mapStateToControlProps(clonedState, ownProps);
    t.is(props.errors[0], 'Duff beer');
});
ava_1.default('mapStateToControlProps - no duplicate error messages', t => {
    const schema = {
        type: 'object',
        properties: {
            firstName: {
                anyOf: [
                    { type: 'string', minLength: 5 },
                    { type: 'string', enum: ['foo', 'bar'] }
                ]
            }
        }
    };
    const initCoreState = src_1.coreReducer(undefined, actions_1.init({}, schema, coreUISchema));
    const updateCoreState = src_1.coreReducer(initCoreState, actions_1.update('firstName', () => true));
    const props = util_1.mapStateToControlProps({ jsonforms: { core: updateCoreState } }, { uischema: coreUISchema });
    // 'should be string' should only appear once
    t.is(props.errors.length, 3);
});
ava_1.default('mapStateToControlProps - id', t => {
    util_1.clearAllIds();
    const ownProps = {
        uischema: coreUISchema,
        id: '#/properties/firstName'
    };
    const props = util_1.mapStateToControlProps(createState(coreUISchema), ownProps);
    t.is(props.id, '#/properties/firstName');
});
ava_1.default('mapDispatchToControlProps', t => {
    const store = mockStore(createState(coreUISchema));
    const props = util_1.mapDispatchToControlProps(store.dispatch);
    props.handleChange('foo', 42);
    const updateAction = _.head(store.getActions());
    t.is(updateAction.type, actions_1.UPDATE_DATA);
    t.is(updateAction.path, 'foo');
    t.is(updateAction.updater(), 42);
});
ava_1.default('createDefaultValue', t => {
    t.true(_.isDate(util_1.createDefaultValue({
        type: 'string',
        format: 'date'
    })));
    t.true(_.isDate(util_1.createDefaultValue({
        type: 'string',
        format: 'date-time'
    })));
    t.true(_.isDate(util_1.createDefaultValue({
        type: 'string',
        format: 'time'
    })));
    t.is(util_1.createDefaultValue({ type: 'string' }), '');
    t.is(util_1.createDefaultValue({ type: 'number' }), 0);
    t.falsy(util_1.createDefaultValue({ type: 'boolean' }));
    t.is(util_1.createDefaultValue({ type: 'integer' }), 0);
    t.deepEqual(util_1.createDefaultValue({ type: 'array' }), []);
    t.is(util_1.createDefaultValue({ type: 'null' }), null);
    t.deepEqual(util_1.createDefaultValue({ type: 'object' }), {});
    t.deepEqual(util_1.createDefaultValue({ type: 'something' }), {});
});
ava_1.default(`mapStateToDispatchRendererProps should generate UI schema given ownProps schema`, t => {
    const store = mockStore(createState(coreUISchema));
    const schema = {
        type: 'object',
        properties: {
            bar: {
                type: 'number'
            }
        }
    };
    const props = util_1.mapStateToJsonFormsRendererProps(store.getState(), { schema });
    t.deepEqual(props.uischema, generators_1.generateDefaultUISchema(schema));
});
ava_1.default(`mapStateToDispatchRendererProps should use registered UI schema given no ownProps`, t => {
    const store = mockStore(createState(coreUISchema));
    const props = util_1.mapStateToJsonFormsRendererProps(store.getState(), {});
    t.deepEqual(props.uischema, coreUISchema);
});
ava_1.default(`mapStateToDispatchRendererProps should use UI schema if given via ownProps`, t => {
    const store = mockStore(createState(coreUISchema));
    const schema = {
        type: 'object',
        properties: {
            foo: {
                type: 'string'
            },
            bar: {
                type: 'number'
            }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#/properties/foo'
    };
    const props = util_1.mapStateToJsonFormsRendererProps(store.getState(), {
        schema,
        uischema
    });
    t.deepEqual(props.uischema, uischema);
});
ava_1.default('mapDispatchToArrayControlProps should adding items to array', t => {
    const data = ['foo'];
    const schema = {
        type: 'array',
        items: {
            type: 'string'
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#'
    };
    const initState = {
        jsonforms: {
            core: {
                uischema,
                schema,
                data,
                errors: []
            }
        }
    };
    const store = redux_1.createStore(redux_1.combineReducers({ jsonforms: reducers_1.jsonformsReducer() }), initState);
    store.dispatch(actions_1.init(data, schema, uischema));
    const ownProps = {
        schema,
        uischema
    };
    const props = util_1.mapDispatchToArrayControlProps(store.dispatch, ownProps);
    props.addItem('')();
    t.is(store.getState().jsonforms.core.data.length, 2);
});
ava_1.default('mapDispatchToArrayControlProps should remove items from array', t => {
    const data = ['foo', 'bar', 'quux'];
    const schema = {
        type: 'array',
        items: {
            type: 'string'
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#'
    };
    const initState = {
        jsonforms: {
            core: {
                uischema,
                schema,
                data,
                errors: []
            }
        }
    };
    const store = redux_1.createStore(redux_1.combineReducers({ jsonforms: reducers_1.jsonformsReducer() }), initState);
    store.dispatch(actions_1.init(data, schema, uischema));
    const ownProps = {
        schema,
        uischema
    };
    const props = util_1.mapDispatchToArrayControlProps(store.dispatch, ownProps);
    props.removeItems('', ['foo', 'bar'])();
    t.is(store.getState().jsonforms.core.data.length, 1);
    t.is(store.getState().jsonforms.core.data[0], 'quux');
});
ava_1.default('mapStateToLayoutProps - visible via state with path from ownProps ', t => {
    const uischema = {
        type: 'VerticalLayout',
        elements: [coreUISchema],
        rule: hideRule
    };
    const ownProps = {
        uischema,
        path: 'foo'
    };
    const state = {
        jsonforms: {
            core: {
                schema: {
                    type: 'object',
                    properties: {
                        firstName: { type: 'string' },
                        lastName: { type: 'string' }
                    }
                },
                data: {
                    foo: { firstName: 'Lisa' }
                },
                uischema,
                errors: []
            }
        }
    };
    const props = util_1.mapStateToLayoutProps(state, ownProps);
    t.true(props.visible);
});
ava_1.default('mapStateToLayoutProps - hidden via state with path from ownProps ', t => {
    const uischema = {
        type: 'VerticalLayout',
        elements: [coreUISchema],
        rule: hideRule
    };
    const ownProps = {
        uischema,
        path: 'foo'
    };
    const state = {
        jsonforms: {
            core: {
                schema: {
                    type: 'object',
                    properties: {
                        firstName: { type: 'string' },
                        lastName: { type: 'string' }
                    }
                },
                data: {
                    foo: { firstName: 'Homer' }
                },
                uischema,
                errors: []
            }
        }
    };
    const props = util_1.mapStateToLayoutProps(state, ownProps);
    t.false(props.visible);
});
ava_1.default('should assign defaults to enum', t => {
    const schema = {
        type: 'object',
        properties: {
            name: {
                type: 'string',
                minLength: 1
            },
            color: {
                type: 'string',
                enum: ['red', 'green', 'blue'],
                default: 'green'
            }
        }
    };
    const uischema = undefined;
    const data = {
        name: 'foo'
    };
    const initState = {
        jsonforms: {
            core: {
                uischema,
                schema,
                data,
                errors: []
            }
        }
    };
    const store = redux_1.createStore(redux_1.combineReducers({ jsonforms: reducers_1.jsonformsReducer() }), initState);
    store.dispatch(actions_1.init(data, schema, uischema, util_1.createAjv({ useDefaults: true })));
    t.is(store.getState().jsonforms.core.data.color, 'green');
});
ava_1.default('should assign defaults to empty item within nested object of an array', t => {
    const schema = {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                    default: 'foo'
                }
            }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#'
    };
    const data = [{}];
    const initState = {
        jsonforms: {
            core: {
                uischema,
                schema,
                data,
                errors: []
            }
        }
    };
    const store = redux_1.createStore(redux_1.combineReducers({ jsonforms: reducers_1.jsonformsReducer() }), initState);
    store.dispatch(actions_1.init(data, schema, uischema, util_1.createAjv({ useDefaults: true })));
    t.is(store.getState().jsonforms.core.data.length, 1);
    t.deepEqual(store.getState().jsonforms.core.data[0], { message: 'foo' });
});
ava_1.default('should assign defaults to newly added item within nested object of an array', t => {
    const schema = {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                    default: 'foo'
                }
            }
        }
    };
    const uischema = {
        type: 'Control',
        scope: '#'
    };
    const data = [{}];
    const initState = {
        jsonforms: {
            core: {
                uischema,
                schema,
                data,
                errors: []
            }
        }
    };
    const store = redux_1.createStore(redux_1.combineReducers({ jsonforms: reducers_1.jsonformsReducer() }), initState);
    store.dispatch(actions_1.init(data, schema, uischema, util_1.createAjv({ useDefaults: true })));
    const ownProps = {
        schema,
        uischema
    };
    const props = util_1.mapDispatchToArrayControlProps(store.dispatch, ownProps);
    props.addItem('')();
    t.is(store.getState().jsonforms.core.data.length, 2);
    t.deepEqual(store.getState().jsonforms.core.data[1], { message: 'foo' });
});
//# sourceMappingURL=data:application/json;base64,