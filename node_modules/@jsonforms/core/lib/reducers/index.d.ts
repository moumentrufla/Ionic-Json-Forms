import { JsonFormsDefaultDataRegistryEntry } from './default-data';
import { Reducer } from 'redux';
import { JsonFormsRendererRegistryEntry, rendererReducer } from './renderers';
import { fieldReducer } from './fields';
import { coreReducer } from './core';
import { JsonFormsState, JsonFormsSubStates } from '../store';
import { UISchemaTester } from './uischemas';
import { ControlElement, JsonSchema, UISchemaElement } from '..';
export { rendererReducer, fieldReducer, coreReducer, UISchemaTester };
export declare const jsonformsReducer: (additionalReducers?: {}) => Reducer<JsonFormsSubStates>;
export declare const getData: (state: JsonFormsState) => any;
export declare const getSchema: (state: JsonFormsState) => JsonSchema;
export declare const getUiSchema: (state: JsonFormsState) => UISchemaElement;
export declare const getDefaultData: (state: JsonFormsState) => JsonFormsDefaultDataRegistryEntry[];
export declare const getRenderers: (state: JsonFormsState) => JsonFormsRendererRegistryEntry[];
export declare const findUISchema: (state: JsonFormsState) => (schema: JsonSchema, schemaPath: string, path: string, fallbackLayoutType?: string, control?: ControlElement) => UISchemaElement;
export declare const getErrorAt: (instancePath: string) => (state: JsonFormsState) => any[];
export declare const getSubErrorsAt: (instancePath: string) => (state: JsonFormsState) => any[];
export declare const getConfig: (state: JsonFormsState) => any;
export declare const getLocale: (state: JsonFormsState) => string;
export declare const getLocalizedSchema: (locale: string) => (state: JsonFormsState) => JsonSchema;
export declare const getLocalizedUISchema: (locale: string) => (state: JsonFormsState) => UISchemaElement;
